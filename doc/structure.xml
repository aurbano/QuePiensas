<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="">
  <file path="auth.php" hash="4535f2deb8b16460f197ba7a6d8785f1" package="Default">
    <docblock line="2">
      <description>Auth security class</description>
      <long-description/>
    </docblock>
    <constant namespace="global" line="158" package="Default">
      <name>PRE</name>
      <full_name>\PRE</full_name>
      <value>"!qp&amp;$("</value>
    </constant>
    <constant namespace="global" line="163" package="Default">
      <name>POST</name>
      <full_name>\POST</full_name>
      <value>"_sa-63}{"</value>
    </constant>
    <class final="false" abstract="false" namespace="global" line="16" package="Security">
      <extends/>
      <name>Auth</name>
      <full_name>\Auth</full_name>
      <docblock line="5">
        <description>AUTH Security System: Handle all security concerns of the website.</description>
        <long-description>&lt;p&gt;Auth class manages all security in the website. It handles session ops (login/logout/register)
as well as permission checks for subsections and actions.
This doesn't manage session control, it only ensures that whatever is stored in session
is valid and secure.&lt;/p&gt;</long-description>
        <tag line="5" name="author" description="Alejandro U. Alvarez"/>
        <tag line="5" name="version" description="1.2"/>
        <tag line="5" name="package" description="Security"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="25" package="Security">
        <name>login</name>
        <full_name>login</full_name>
        <docblock line="17">
          <description>Secure login using email/pass</description>
          <long-description>&lt;p&gt;All variables are escaped and validated here&lt;/p&gt;</long-description>
          <tag line="17" name="param" description="User email" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="17" name="param" description="User password" type="string" variable="$pass">
            <type by_reference="false">string</type>
          </tag>
          <tag line="17" name="return" description="True if login was successful" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
        <argument line="25">
          <name>$pass</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Security">
        <name>register</name>
        <full_name>register</full_name>
        <docblock line="47">
          <description>Register a new user</description>
          <long-description>&lt;p&gt;All variables are escaped and validated here&lt;/p&gt;</long-description>
          <tag line="47" name="param" description="Email" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="param" description="Name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="param" description="Password" type="string" variable="$pass">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="param" description="Whether the email has already been checked to avoid duplicates" type="boolean" variable="$checkedEmail">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="47" name="param" description="Whether an actiation mail should be sent to the provided email" type="boolean" variable="$rev">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="47" name="return" description="True if registration was successful" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$pass</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$checkedEmail</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="58">
          <name>$rev</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="90" package="Security">
        <name>sendActivationMail</name>
        <full_name>sendActivationMail</full_name>
        <docblock line="82">
          <description>Send an activation mail to the provided user</description>
          <long-description/>
          <tag line="82" name="param" description="User ID" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="82" name="param" description="User name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="param" description="Email address" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="param" description="Secret code to be used for verification" type="\secret" variable="$secret">
            <type by_reference="false">\secret</type>
          </tag>
          <tag line="82" name="return" description="Whether the email was sent" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="90">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="90">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
        <argument line="90">
          <name>$secret</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="104" package="Security">
        <name>emailExists</name>
        <full_name>emailExists</full_name>
        <docblock line="99">
          <description>Checks if an email already exists on the database</description>
          <long-description/>
          <tag line="99" name="param" description="Email address to be checked" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="99" name="return" description="Whether the email is already in use" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="123" package="Security">
        <name>addUser</name>
        <full_name>addUser</full_name>
        <docblock line="114">
          <description>Add a username, similar to register but used to add users automatically</description>
          <long-description/>
          <tag line="114" name="param" description="User name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="114" name="param" description="Email address" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="114" name="param" description="Password" type="string" variable="$pass">
            <type by_reference="false">string</type>
          </tag>
          <tag line="114" name="param" description="Facebook account ID" type="int" variable="$fbuser">
            <type by_reference="false">int</type>
          </tag>
          <tag line="114" name="param" description="Twitter account ID" type="int" variable="$twuser">
            <type by_reference="false">int</type>
          </tag>
          <tag line="114" name="regurn" description="boolean Whether the account was created"/>
        </docblock>
        <argument line="123">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="123">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
        <argument line="123">
          <name>$pass</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="123">
          <name>$fbuser</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="123">
          <name>$twuser</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="145" package="Security">
        <name>changePass</name>
        <full_name>changePass</full_name>
        <docblock line="139">
          <description>Changes a user password</description>
          <long-description/>
          <tag line="139" name="param" description="User ID" type="int" variable="$usid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="139" name="param" description="New password" type="string" variable="$pass">
            <type by_reference="false">string</type>
          </tag>
          <tag line="139" name="return" description="Whether the password was changed" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$usid</name>
          <default/>
          <type/>
        </argument>
        <argument line="145">
          <name>$pass</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="block.php" hash="a805e09961e7a61ad37fb7dda11c6d9c" package="Security">
    <docblock line="2">
      <description>This a security file that blocks access to certain pages</description>
      <long-description>&lt;p&gt;If a user tries to access a page without permission it will be sent to an error page with more information
blocked pages can be specified in an array below.&lt;/p&gt;</long-description>
      <tag line="2" name="author" description="Alejandro U. Alvarez"/>
      <tag line="2" name="version" description="1"/>
      <tag line="2" name="package" description="Security"/>
    </docblock>
    <include line="18" type="Include" package="Default">
      <name/>
    </include>
    <include line="24" type="Include" package="Default">
      <name/>
    </include>
  </file>
  <file path="db.class.php" hash="c8ed0cd8d00306005c9780e6534f1da8" package="Default">
    <docblock line="2">
      <description>Database abstraction layer</description>
      <long-description/>
    </docblock>
    <include line="51" type="Include" package="Default">
      <name>lib/content/busy.php</name>
    </include>
    <include line="213" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="16" package="Database">
      <extends/>
      <name>DB</name>
      <full_name>\DB</full_name>
      <docblock line="6">
        <description>A PHP class to access MySQL database with convenient methods
in an object oriented way, and with a powerful debug system.\n
Licence: 	LGPL \n
Web site:	http://slaout.linux62.org/</description>
        <long-description/>
        <tag line="6" name="version" description="2.0"/>
        <tag line="6" name="author" description="Sebastien Laout (slaout@linux62.org)"/>
        <tag line="6" name="author" description="Alejandro U. Alvarez"/>
        <tag line="6" name="package" description="Database"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="20" namespace="global" package="Default">
        <name>$defaultDebug</name>
        <default>false</default>
        <docblock line="17">
          <description>Put this variable to true if you want ALL queries to be debugged by default:</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="26" namespace="global" package="Default">
        <name>$mtStart</name>
        <default/>
        <docblock line="22">
          <description>INTERNAL: The start time, in miliseconds.</description>
          <long-description/>
          <tag line="22" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" namespace="global" package="Default">
        <name>$nbQueries</name>
        <default/>
        <docblock line="27">
          <description>INTERNAL: The number of executed queries.</description>
          <long-description/>
          <tag line="27" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" namespace="global" package="Default">
        <name>$lastResult</name>
        <default/>
        <docblock line="32">
          <description>INTERNAL: The last result ressource of a query().</description>
          <long-description/>
          <tag line="32" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Database">
        <name>DB</name>
        <full_name>DB</full_name>
        <docblock line="38">
          <description>Connect to a MySQL database to be able to use the methods below.</description>
          <long-description/>
          <tag line="38" name="param" description="Database to connect" type="string" variable="$base">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="Database server" type="string" variable="$server">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="Username" type="string" variable="$user">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="Password" type="string" variable="$pass">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$base</name>
          <default/>
          <type/>
        </argument>
        <argument line="45">
          <name>$server</name>
          <default/>
          <type/>
        </argument>
        <argument line="45">
          <name>$user</name>
          <default/>
          <type/>
        </argument>
        <argument line="45">
          <name>$pass</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="64" package="Database">
        <name>query</name>
        <full_name>query</full_name>
        <docblock line="58">
          <description>Query the database.</description>
          <long-description/>
          <tag line="58" name="param" description="The query." type="\" variable="$query"/>
          <tag line="58" name="param" description="If true, it output the query and the resulting table." type="\" variable="$debug"/>
          <tag line="58" name="return" description="result of the query, to use with fetchNextObject()." type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
        <argument line="64">
          <name>$debug</name>
          <default>-1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="79" package="Database">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="73">
          <description>Do the same as query() but do not return nor store result.\n
Should be used for INSERT, UPDATE, DELETE.</description>
          <long-description>&lt;p&gt;..&lt;/p&gt;</long-description>
          <tag line="73" name="param" description="The query." type="\" variable="$query"/>
          <tag line="73" name="param" description="If true, it output the query and the resulting table." type="\" variable="$debug"/>
          <tag line="73" name="return" description="status" type="\Query">
            <type by_reference="false">\Query</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
        <argument line="79">
          <name>$debug</name>
          <default>-1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="90" package="Database">
        <name>fetchNextObject</name>
        <full_name>fetchNextObject</full_name>
        <docblock line="86">
          <description>Convenient method for mysql_fetch_object().</description>
          <long-description/>
          <tag line="86" name="param" description="The ressource returned by query(). If NULL, the last result returned by query() will be used." type="\" variable="$result"/>
          <tag line="86" name="return" description="object representing a data row." type="\An">
            <type by_reference="false">\An</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$result</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="104" package="Database">
        <name>numRows</name>
        <full_name>numRows</full_name>
        <docblock line="100">
          <description>Get the number of rows of a query.</description>
          <long-description/>
          <tag line="100" name="param" description="The ressource returned by query(). If NULL, the last result returned by query() will be used." type="\" variable="$result"/>
          <tag line="100" name="return" description="number of rows of the query (0 or more)." type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$result</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="118" package="Database">
        <name>queryUniqueObject</name>
        <full_name>queryUniqueObject</full_name>
        <docblock line="111">
          <description>Get the result of the query as an object.</description>
          <long-description>&lt;p&gt;The query should return a unique row.\n
Note: no need to add "LIMIT 1" at the end of your query because
the method will add that (for optimisation purpose).&lt;/p&gt;</long-description>
          <tag line="111" name="param" description="The query." type="\" variable="$query"/>
          <tag line="111" name="param" description="If true, it output the query and the resulting row." type="\" variable="$debug"/>
          <tag line="111" name="return" description="object representing a data row (or NULL if result is empty)." type="\An">
            <type by_reference="false">\An</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
        <argument line="118">
          <name>$debug</name>
          <default>-1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="136" package="Database">
        <name>queryUniqueValue</name>
        <full_name>queryUniqueValue</full_name>
        <docblock line="129">
          <description>Get the result of the query as value.</description>
          <long-description>&lt;p&gt;The query should return a unique cell.\n
Note: no need to add "LIMIT 1" at the end of your query because
the method will add that (for optimisation purpose).&lt;/p&gt;</long-description>
          <tag line="129" name="param" description="The query." type="\" variable="$query"/>
          <tag line="129" name="param" description="If true, it output the query and the resulting value." type="\" variable="$debug"/>
          <tag line="129" name="return" description="value representing a data cell (or NULL if result is empty)." type="\A">
            <type by_reference="false">\A</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
        <argument line="136">
          <name>$debug</name>
          <default>-1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="Database">
        <name>maxOf</name>
        <full_name>maxOf</full_name>
        <docblock line="148">
          <description>Get the maximum value of a column in a table, with a condition.</description>
          <long-description/>
          <tag line="148" name="param" description="The column where to compute the maximum." type="\" variable="$column"/>
          <tag line="148" name="param" description="The table where to compute the maximum." type="\" variable="$table"/>
          <tag line="148" name="param" description="The condition before to compute the maximum." type="\" variable="$where"/>
          <tag line="148" name="return" description="maximum value (or NULL if result is empty)." type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$column</name>
          <default/>
          <type/>
        </argument>
        <argument line="154">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="154">
          <name>$where</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="163" package="Database">
        <name>maxOfAll</name>
        <full_name>maxOfAll</full_name>
        <docblock line="158">
          <description>Get the maximum value of a column in a table.</description>
          <long-description/>
          <tag line="158" name="param" description="The column where to compute the maximum." type="\" variable="$column"/>
          <tag line="158" name="param" description="The table where to compute the maximum." type="\" variable="$table"/>
          <tag line="158" name="return" description="maximum value (or NULL if result is empty)." type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
        <argument line="163">
          <name>$column</name>
          <default/>
          <type/>
        </argument>
        <argument line="163">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="172" package="Database">
        <name>countOf</name>
        <full_name>countOf</full_name>
        <docblock line="167">
          <description>Get the count of rows in a table, with a condition.</description>
          <long-description/>
          <tag line="167" name="param" description="The table where to compute the number of rows." type="\" variable="$table"/>
          <tag line="167" name="param" description="The condition before to compute the number or rows." type="\" variable="$where"/>
          <tag line="167" name="return" description="number of rows (0 or more)." type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
        <argument line="172">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="172">
          <name>$where</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="180" package="Database">
        <name>countOfAll</name>
        <full_name>countOfAll</full_name>
        <docblock line="176">
          <description>Get the count of rows in a table.</description>
          <long-description/>
          <tag line="176" name="param" description="The table where to compute the number of rows." type="\" variable="$table"/>
          <tag line="176" name="return" description="number of rows (0 or more)." type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="188" package="Database">
        <name>debugAndDie</name>
        <full_name>debugAndDie</full_name>
        <docblock line="184">
          <description>Internal function to debug when MySQL encountered an error,
even if debug is set to Off.</description>
          <long-description/>
          <tag line="184" name="param" description="The SQL query to echo before diying." type="\" variable="$query"/>
        </docblock>
        <argument line="188">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="222" package="Database">
        <name>debug</name>
        <full_name>debug</full_name>
        <docblock line="216">
          <description>Internal function to debug a MySQL query.\n
Show the query and output the resulting table if not NULL.</description>
          <long-description/>
          <tag line="216" name="param" description="The parameter passed to query() functions. Can be boolean or -1 (default)." type="\" variable="$debug"/>
          <tag line="216" name="param" description="The SQL query to debug." type="\" variable="$query"/>
          <tag line="216" name="param" description="The resulting table of the query, if available." type="\" variable="$result"/>
        </docblock>
        <argument line="222">
          <name>$debug</name>
          <default/>
          <type/>
        </argument>
        <argument line="222">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
        <argument line="222">
          <name>$result</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="243" package="Database">
        <name>debugQuery</name>
        <full_name>debugQuery</full_name>
        <docblock line="236">
          <description>Internal function to output a query for debug purpose.\n
Should be followed by a call to debugResult() or an echo of "&lt;/div&gt;".</description>
          <long-description/>
          <tag line="236" name="param" description="The SQL query to debug." type="string" variable="$query">
            <type by_reference="false">string</type>
          </tag>
          <tag line="236" name="param" description="The reason why this function is called: &quot;Default Debug&quot;, &quot;Debug&quot; or &quot;Error&quot;." type="string" variable="$reason">
            <type by_reference="false">string</type>
          </tag>
          <tag line="236" name="param" description="Whether it should return or echo the debugger results" type="boolean" variable="$return">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="236" name="return" description="If $return is set to true" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="243">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
        <argument line="243">
          <name>$reason</name>
          <default>"Debug"</default>
          <type/>
        </argument>
        <argument line="243">
          <name>$return</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="257" package="Database">
        <name>debugResult</name>
        <full_name>debugResult</full_name>
        <docblock line="252">
          <description>Internal function to output a table representing the result of a query, for debug purpose.\n
Should be preceded by a call to debugQuery().</description>
          <long-description/>
          <tag line="252" name="param" description="The resulting table of the query." type="\" variable="$result"/>
          <tag line="252" name="access" description="private"/>
        </docblock>
        <argument line="257">
          <name>$result</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="299" package="Database">
        <name>getExecTime</name>
        <full_name>getExecTime</full_name>
        <docblock line="295">
          <description>Get how many time the script took from the begin of this object.</description>
          <long-description/>
          <tag line="295" name="return" description="script execution time in seconds since the&#13;&#10;creation of this object." type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="307" package="Database">
        <name>getQueriesCount</name>
        <full_name>getQueriesCount</full_name>
        <docblock line="303">
          <description>Get the number of queries executed from the begin of this object.</description>
          <long-description/>
          <tag line="303" name="return" description="number of queries executed on the database server since the&#13;&#10;creation of this object." type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="314" package="Database">
        <name>resetFetch</name>
        <full_name>resetFetch</full_name>
        <docblock line="311">
          <description>Go back to the first element of the result line.</description>
          <long-description/>
          <tag line="311" name="param" description="The resssource returned by a query() function." type="\" variable="$result"/>
        </docblock>
        <argument line="314">
          <name>$result</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="322" package="Database">
        <name>lastInsertedId</name>
        <full_name>lastInsertedId</full_name>
        <docblock line="319">
          <description>Get the id of the very last inserted row.</description>
          <long-description/>
          <tag line="319" name="return" description="id of the very last inserted row (in any table)." type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="329" package="Database">
        <name>close</name>
        <full_name>close</full_name>
        <docblock line="326">
          <description>Close the connexion with the database server.\n
It's usually unneeded since PHP do it automatically at script end.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="337" package="Database">
        <name>getMicroTime</name>
        <full_name>getMicroTime</full_name>
        <docblock line="334">
          <description>Internal method to get the current time.</description>
          <long-description/>
          <tag line="334" name="return" description="current time in seconds with microseconds (in float format)." type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="db.php" hash="c12a5f8c806cae0ce87714c175c663d0" package="Default">
    <docblock line="2">
      <description>Database connection system to avoid having to include Session.</description>
      <long-description/>
    </docblock>
    <include line="9" type="Include" package="Default">
      <name>db.class.php</name>
      <docblock line="6">
        <description>Use where you need a database connection but don't need all Session variables
or users.</description>
        <long-description>&lt;p&gt;Mainly for administration pages&lt;/p&gt;</long-description>
      </docblock>
    </include>
  </file>
  <file path="deleteOldRestores.php" hash="03c10b2674a739f052d8425206d9a615" package="Default">
    <docblock line="2">
      <description>CRON JOB page, deletes old password restores</description>
      <long-description/>
    </docblock>
    <include line="9" type="Include" package="Default">
      <name>db.php</name>
      <docblock line="6">
        <description>Connect to the database</description>
        <long-description/>
      </docblock>
    </include>
  </file>
  <file path="distance.php" hash="66b4af9e0467be9e1007844d64fe3af3" package="Default">
    <docblock line="2">
      <description>Distance calculations functions</description>
      <long-description/>
    </docblock>
    <function namespace="global" line="12" package="Default">
      <name>distance</name>
      <full_name>\distance</full_name>
      <docblock line="6">
        <description>Calculates the distance between coordinates</description>
        <long-description/>
        <tag line="6" name="param" description="Localization array returned by getloc in User class" type="array" variable="$loc">
          <type by_reference="false">array</type>
        </tag>
        <tag line="6" name="see" description="\global\User::getLoc" refers="\global\User::getLoc"/>
        <tag line="6" name="return" description="MySQL part of query to get the distance" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="12">
        <name>$loc</name>
        <default/>
        <type/>
      </argument>
    </function>
  </file>
  <file path="EpiCurl.php" hash="dcaf2d540e9a9ddd29d6a7db706a7a14" package="Default">
    <class final="false" abstract="false" namespace="global" line="8" package="Social\Twitter">
      <extends/>
      <name>EpiCurl</name>
      <full_name>\EpiCurl</full_name>
      <docblock line="2">
        <description>Assync cURL</description>
        <long-description/>
        <tag line="2" name="author" description="Jaisen Mathai &lt;jaisen@jmathai.com&gt;"/>
        <tag line="2" name="package" description="Social"/>
        <tag line="2" name="subpackage" description="Twitter"/>
      </docblock>
      <constant namespace="global" line="10" package="Social\Twitter">
        <name>timeout</name>
        <full_name>timeout</full_name>
        <value>3</value>
      </constant>
      <property final="false" static="true" visibility="public" line="11" namespace="global" package="Default">
        <name>$inst</name>
        <default>null</default>
      </property>
      <property final="false" static="true" visibility="public" line="12" namespace="global" package="Default">
        <name>$singleton</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="private" line="13" namespace="global" package="Default">
        <name>$mc</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="14" namespace="global" package="Default">
        <name>$msgs</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="15" namespace="global" package="Default">
        <name>$running</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="16" namespace="global" package="Default">
        <name>$requests</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="17" namespace="global" package="Default">
        <name>$responses</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="18" namespace="global" package="Default">
        <name>$properties</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="20" package="Social\Twitter">
        <name>__construct</name>
        <full_name>__construct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="36" package="Social\Twitter">
        <name>addCurl</name>
        <full_name>addCurl</full_name>
        <argument line="36">
          <name>$ch</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Social\Twitter">
        <name>getResult</name>
        <full_name>getResult</full_name>
        <argument line="58">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="86" package="Social\Twitter">
        <name>storeResponses</name>
        <full_name>storeResponses</full_name>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="100" package="Social\Twitter">
        <name>getInstance</name>
        <full_name>getInstance</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="112" package="Default">
      <extends/>
      <name>EpiCurlManager</name>
      <full_name>\EpiCurlManager</full_name>
      <property final="false" static="false" visibility="private" line="114" namespace="global" package="Default">
        <name>$key</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="115" namespace="global" package="Default">
        <name>$epiCurl</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="117" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="117">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="123" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <argument line="123">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file EpiCurl.php</error>
      <error line="11" code="50018">No DocBlock was found for property $inst</error>
      <error line="12" code="50018">No DocBlock was found for property $singleton</error>
      <error line="13" code="50018">No DocBlock was found for property $mc</error>
      <error line="14" code="50018">No DocBlock was found for property $msgs</error>
      <error line="15" code="50018">No DocBlock was found for property $running</error>
      <error line="16" code="50018">No DocBlock was found for property $requests</error>
      <error line="17" code="50018">No DocBlock was found for property $responses</error>
      <error line="18" code="50018">No DocBlock was found for property $properties</error>
      <error line="20" code="50010">No DocBlock was found for method __construct()</error>
      <error line="36" code="50010">No DocBlock was found for method addCurl()</error>
      <error line="58" code="50010">No DocBlock was found for method getResult()</error>
      <error line="86" code="50010">No DocBlock was found for method storeResponses()</error>
      <error line="100" code="50010">No DocBlock was found for method getInstance()</error>
      <error line="112" code="50000">No DocBlock was found for \EpiCurlManager</error>
      <error line="114" code="50018">No DocBlock was found for property $key</error>
      <error line="115" code="50018">No DocBlock was found for property $epiCurl</error>
      <error line="117" code="50010">No DocBlock was found for method __construct()</error>
      <error line="123" code="50010">No DocBlock was found for method __get()</error>
    </parse_markers>
  </file>
  <file path="EpiOAuth.php" hash="da111d05b3f3356782282957114183b8" package="Default">
    <class final="false" abstract="false" namespace="global" line="8" package="Social\Twitter">
      <extends/>
      <name>EpiOAuth</name>
      <full_name>\EpiOAuth</full_name>
      <docblock line="2">
        <description>Assync OAuth</description>
        <long-description>&lt;p&gt;@author Jaisen Mathai &lt;a href="&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#111;&amp;#x3a;&amp;#106;&amp;#x61;&amp;#105;&amp;#x73;e&amp;#110;&amp;#x40;&amp;#106;&amp;#x6d;&amp;#97;&amp;#x74;&amp;#x68;&amp;#97;&amp;#x69;&amp;#46;&amp;#x63;o&amp;#109;"&gt;&amp;#106;&amp;#x61;&amp;#105;&amp;#x73;e&amp;#110;&amp;#x40;&amp;#106;&amp;#x6d;&amp;#97;&amp;#x74;&amp;#x68;&amp;#97;&amp;#x69;&amp;#46;&amp;#x63;o&amp;#109;&lt;/a&gt;&lt;/p&gt;</long-description>
        <tag line="2" name="package" description="Social"/>
        <tag line="2" name="subpackage" description="Twitter"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="10" namespace="global" package="Default">
        <name>$version</name>
        <default>'1.0'</default>
      </property>
      <property final="false" static="false" visibility="protected" line="12" namespace="global" package="Default">
        <name>$requestTokenUrl</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="13" namespace="global" package="Default">
        <name>$accessTokenUrl</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="14" namespace="global" package="Default">
        <name>$authenticateUrl</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="15" namespace="global" package="Default">
        <name>$authorizeUrl</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="16" namespace="global" package="Default">
        <name>$consumerKey</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="17" namespace="global" package="Default">
        <name>$consumerSecret</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="18" namespace="global" package="Default">
        <name>$token</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="19" namespace="global" package="Default">
        <name>$tokenSecret</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="20" namespace="global" package="Default">
        <name>$signatureMethod</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="22" package="Social\Twitter">
        <name>getAccessToken</name>
        <full_name>getAccessToken</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Social\Twitter">
        <name>getAuthenticateUrl</name>
        <full_name>getAuthenticateUrl</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="34" package="Social\Twitter">
        <name>getAuthorizationUrl</name>
        <full_name>getAuthorizationUrl</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="40" package="Social\Twitter">
        <name>getRequestToken</name>
        <full_name>getRequestToken</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="46" package="Social\Twitter">
        <name>httpRequest</name>
        <full_name>httpRequest</full_name>
        <argument line="46">
          <name>$method</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="46">
          <name>$url</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="46">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="65" package="Social\Twitter">
        <name>setToken</name>
        <full_name>setToken</full_name>
        <argument line="65">
          <name>$token</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="65">
          <name>$secret</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="72" package="Social\Twitter">
        <name>encode_rfc3986</name>
        <full_name>encode_rfc3986</full_name>
        <argument line="72">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="77" package="Social\Twitter">
        <name>addOAuthHeaders</name>
        <full_name>addOAuthHeaders</full_name>
        <argument line="77">
          <name>$ch</name>
          <default/>
          <type/>
        </argument>
        <argument line="77">
          <name>$url</name>
          <default/>
          <type/>
        </argument>
        <argument line="77">
          <name>$oauthHeaders</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="91" package="Social\Twitter">
        <name>generateNonce</name>
        <full_name>generateNonce</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="99" package="Social\Twitter">
        <name>generateSignature</name>
        <full_name>generateSignature</full_name>
        <argument line="99">
          <name>$method</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="99">
          <name>$url</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="99">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="122" package="Social\Twitter">
        <name>httpGet</name>
        <full_name>httpGet</full_name>
        <argument line="122">
          <name>$url</name>
          <default/>
          <type/>
        </argument>
        <argument line="122">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="141" package="Social\Twitter">
        <name>httpPost</name>
        <full_name>httpPost</full_name>
        <argument line="141">
          <name>$url</name>
          <default/>
          <type/>
        </argument>
        <argument line="141">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="152" package="Social\Twitter">
        <name>normalizeUrl</name>
        <full_name>normalizeUrl</full_name>
        <argument line="152">
          <name>$url</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="173" package="Social\Twitter">
        <name>prepareParameters</name>
        <full_name>prepareParameters</full_name>
        <argument line="173">
          <name>$method</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="173">
          <name>$url</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="173">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="199" package="Social\Twitter">
        <name>signString</name>
        <full_name>signString</full_name>
        <argument line="199">
          <name>$string</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="213" package="Social\Twitter">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="213">
          <name>$consumerKey</name>
          <default/>
          <type/>
        </argument>
        <argument line="213">
          <name>$consumerSecret</name>
          <default/>
          <type/>
        </argument>
        <argument line="213">
          <name>$signatureMethod</name>
          <default>'HMAC-SHA1'</default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="222" package="Default">
      <extends/>
      <name>EpiOAuthResponse</name>
      <full_name>\EpiOAuthResponse</full_name>
      <property final="false" static="false" visibility="private" line="224" namespace="global" package="Default">
        <name>$__resp</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="226" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="226">
          <name>$resp</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="231" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <argument line="231">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="246" package="Default">
      <extends>\Exception</extends>
      <name>EpiOAuthException</name>
      <full_name>\EpiOAuthException</full_name>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="248" package="Default">
        <name>raise</name>
        <full_name>raise</full_name>
        <argument line="248">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="248">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="263" package="Default">
      <extends>\EpiOAuthException</extends>
      <name>EpiOAuthBadRequestException</name>
      <full_name>\EpiOAuthBadRequestException</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="264" package="Default">
      <extends>\EpiOAuthException</extends>
      <name>EpiOAuthUnauthorizedException</name>
      <full_name>\EpiOAuthUnauthorizedException</full_name>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file EpiOAuth.php</error>
      <error line="10" code="50018">No DocBlock was found for property $version</error>
      <error line="12" code="50018">No DocBlock was found for property $requestTokenUrl</error>
      <error line="13" code="50018">No DocBlock was found for property $accessTokenUrl</error>
      <error line="14" code="50018">No DocBlock was found for property $authenticateUrl</error>
      <error line="15" code="50018">No DocBlock was found for property $authorizeUrl</error>
      <error line="16" code="50018">No DocBlock was found for property $consumerKey</error>
      <error line="17" code="50018">No DocBlock was found for property $consumerSecret</error>
      <error line="18" code="50018">No DocBlock was found for property $token</error>
      <error line="19" code="50018">No DocBlock was found for property $tokenSecret</error>
      <error line="20" code="50018">No DocBlock was found for property $signatureMethod</error>
      <error line="22" code="50010">No DocBlock was found for method getAccessToken()</error>
      <error line="28" code="50010">No DocBlock was found for method getAuthenticateUrl()</error>
      <error line="34" code="50010">No DocBlock was found for method getAuthorizationUrl()</error>
      <error line="40" code="50010">No DocBlock was found for method getRequestToken()</error>
      <error line="46" code="50010">No DocBlock was found for method httpRequest()</error>
      <error line="65" code="50010">No DocBlock was found for method setToken()</error>
      <error line="72" code="50010">No DocBlock was found for method encode_rfc3986()</error>
      <error line="77" code="50010">No DocBlock was found for method addOAuthHeaders()</error>
      <error line="91" code="50010">No DocBlock was found for method generateNonce()</error>
      <error line="99" code="50010">No DocBlock was found for method generateSignature()</error>
      <error line="122" code="50010">No DocBlock was found for method httpGet()</error>
      <error line="141" code="50010">No DocBlock was found for method httpPost()</error>
      <error line="152" code="50010">No DocBlock was found for method normalizeUrl()</error>
      <error line="173" code="50010">No DocBlock was found for method prepareParameters()</error>
      <error line="199" code="50010">No DocBlock was found for method signString()</error>
      <error line="213" code="50010">No DocBlock was found for method __construct()</error>
      <error line="222" code="50000">No DocBlock was found for \EpiOAuthResponse</error>
      <error line="224" code="50018">No DocBlock was found for property $__resp</error>
      <error line="226" code="50010">No DocBlock was found for method __construct()</error>
      <error line="231" code="50010">No DocBlock was found for method __get()</error>
      <error line="246" code="50000">No DocBlock was found for \EpiOAuthException</error>
      <error line="248" code="50010">No DocBlock was found for method raise()</error>
      <error line="263" code="50000">No DocBlock was found for \EpiOAuthBadRequestException</error>
      <error line="264" code="50000">No DocBlock was found for \EpiOAuthUnauthorizedException</error>
    </parse_markers>
  </file>
  <file path="EpiTwitter.php" hash="7fafc23b88e6be0ddc4e58d4f2eb6928" package="Default">
    <class final="false" abstract="false" namespace="global" line="14" package="Social\Twitter">
      <extends>\EpiOAuth</extends>
      <name>EpiTwitter</name>
      <full_name>\EpiTwitter</full_name>
      <docblock line="2">
        <description>Class to integrate with Twitter's API.</description>
        <long-description>&lt;p&gt;Authenticated calls are done using OAuth and require access tokens for a user.
   API calls which do not require authentication do not require tokens (i.e. search/trends)&lt;/p&gt;

&lt;p&gt;Full documentation available on github
   http://wiki.github.com/jmathai/epicode/epitwitter&lt;/p&gt;</long-description>
        <tag line="2" name="author" description="Jaisen Mathai &lt;jaisen@jmathai.com&gt;"/>
        <tag line="2" name="package" description="Social"/>
        <tag line="2" name="subpackage" description="Twitter"/>
      </docblock>
      <constant namespace="global" line="16" package="Social\Twitter">
        <name>EPITWITTER_SIGNATURE_METHOD</name>
        <full_name>EPITWITTER_SIGNATURE_METHOD</full_name>
        <value>'HMAC-SHA1'</value>
      </constant>
      <property final="false" static="false" visibility="protected" line="17" namespace="global" package="Default">
        <name>$requestTokenUrl</name>
        <default>'http://twitter.com/oauth/request_token'</default>
      </property>
      <property final="false" static="false" visibility="protected" line="18" namespace="global" package="Default">
        <name>$accessTokenUrl</name>
        <default>'http://twitter.com/oauth/access_token'</default>
      </property>
      <property final="false" static="false" visibility="protected" line="19" namespace="global" package="Default">
        <name>$authorizeUrl</name>
        <default>'http://twitter.com/oauth/authorize'</default>
      </property>
      <property final="false" static="false" visibility="protected" line="20" namespace="global" package="Default">
        <name>$authenticateUrl</name>
        <default>'http://twitter.com/oauth/authenticate'</default>
      </property>
      <property final="false" static="false" visibility="protected" line="21" namespace="global" package="Default">
        <name>$apiUrl</name>
        <default>'http://twitter.com'</default>
      </property>
      <property final="false" static="false" visibility="protected" line="22" namespace="global" package="Default">
        <name>$searchUrl</name>
        <default>'http://search.twitter.com'</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Social\Twitter">
        <name>__call</name>
        <full_name>__call</full_name>
        <argument line="24">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="24">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Social\Twitter">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="47">
          <name>$consumerKey</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="47">
          <name>$consumerSecret</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="47">
          <name>$oauthToken</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="47">
          <name>$oauthTokenSecret</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="54" package="Default">
      <extends/>
      <implements>\ArrayAccess</implements>
      <implements>\Countable</implements>
      <implements>\IteratorAggregate</implements>
      <name>EpiTwitterJson</name>
      <full_name>\EpiTwitterJson</full_name>
      <property final="false" static="false" visibility="private" line="56" namespace="global" package="Default">
        <name>$__resp</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="57" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="57">
          <name>$response</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="63" package="Default">
        <name>getIterator</name>
        <full_name>getIterator</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="69" package="Default">
        <name>count</name>
        <full_name>count</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Default">
        <name>offsetSet</name>
        <full_name>offsetSet</full_name>
        <argument line="76">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
        <argument line="76">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="82" package="Default">
        <name>offsetExists</name>
        <full_name>offsetExists</full_name>
        <argument line="82">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="88" package="Default">
        <name>offsetUnset</name>
        <full_name>offsetUnset</full_name>
        <argument line="88">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Default">
        <name>offsetGet</name>
        <full_name>offsetGet</full_name>
        <argument line="94">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="99" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <argument line="99">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="115" package="Default">
        <name>__isset</name>
        <full_name>__isset</full_name>
        <argument line="115">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file EpiTwitter.php</error>
      <error line="17" code="50018">No DocBlock was found for property $requestTokenUrl</error>
      <error line="18" code="50018">No DocBlock was found for property $accessTokenUrl</error>
      <error line="19" code="50018">No DocBlock was found for property $authorizeUrl</error>
      <error line="20" code="50018">No DocBlock was found for property $authenticateUrl</error>
      <error line="21" code="50018">No DocBlock was found for property $apiUrl</error>
      <error line="22" code="50018">No DocBlock was found for property $searchUrl</error>
      <error line="24" code="50010">No DocBlock was found for method __call()</error>
      <error line="47" code="50010">No DocBlock was found for method __construct()</error>
      <error line="54" code="50000">No DocBlock was found for \EpiTwitterJson</error>
      <error line="56" code="50018">No DocBlock was found for property $__resp</error>
      <error line="57" code="50010">No DocBlock was found for method __construct()</error>
      <error line="63" code="50010">No DocBlock was found for method getIterator()</error>
      <error line="69" code="50010">No DocBlock was found for method count()</error>
      <error line="76" code="50010">No DocBlock was found for method offsetSet()</error>
      <error line="82" code="50010">No DocBlock was found for method offsetExists()</error>
      <error line="88" code="50010">No DocBlock was found for method offsetUnset()</error>
      <error line="94" code="50010">No DocBlock was found for method offsetGet()</error>
      <error line="99" code="50010">No DocBlock was found for method __get()</error>
      <error line="115" code="50010">No DocBlock was found for method __isset()</error>
    </parse_markers>
  </file>
  <file path="facebook\base_facebook.php" hash="7ea176df922d923185aeb2f3f70e84ad" package="Default">
    <docblock line="2">
      <description>Copyright 2011 Facebook, Inc.</description>
      <long-description>&lt;p&gt;Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.&lt;/p&gt;</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="33" package="Social\Facebook">
      <extends>\Exception</extends>
      <name>FacebookApiException</name>
      <full_name>\FacebookApiException</full_name>
      <docblock line="25">
        <description>Thrown when an API call returns an exception.</description>
        <long-description/>
        <tag line="25" name="author" description="Naitik Shah &lt;naitik@facebook.com&gt;"/>
        <tag line="25" name="author" description="Facebook Inc"/>
        <tag line="25" name="package" description="Social"/>
        <tag line="25" name="subpackage" description="Facebook"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="38" namespace="global" package="Default">
        <name>$result</name>
        <default/>
        <docblock line="35">
          <description>The result from the API server that represents the exception information.</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Social\Facebook">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="40">
          <description>Make a new API Exception with the given result.</description>
          <long-description/>
          <tag line="40" name="param" description="The result from the API server" type="array" variable="$result">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$result</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="Social\Facebook">
        <name>getResult</name>
        <full_name>getResult</full_name>
        <docblock line="66">
          <description>Return the associated result object returned by the API server.</description>
          <long-description/>
          <tag line="66" name="return" description="The result from the API server" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="81" package="Social\Facebook">
        <name>getType</name>
        <full_name>getType</full_name>
        <docblock line="75">
          <description>Returns the associated type for the error.</description>
          <long-description>&lt;p&gt;This will default to
'Exception' when a type is not available.&lt;/p&gt;</long-description>
          <tag line="75" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="103" package="Social\Facebook">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="98">
          <description>To make debugging easier.</description>
          <long-description/>
          <tag line="98" name="return" description="The string representation of the error" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="true" namespace="global" line="121" package="Default">
      <extends/>
      <name>BaseFacebook</name>
      <full_name>\BaseFacebook</full_name>
      <docblock line="112">
        <description>Provides access to the Facebook Platform.</description>
        <long-description>&lt;p&gt;This class provides
a majority of the functionality needed, but the class is abstract
because it is designed to be sub-classed.  The subclass must
implement the four abstract methods listed at the bottom of
the file.&lt;/p&gt;</long-description>
        <tag line="112" name="author" description="Naitik Shah &lt;naitik@facebook.com&gt;"/>
      </docblock>
      <constant namespace="global" line="126" package="Default">
        <name>VERSION</name>
        <full_name>VERSION</full_name>
        <value>'3.1.1'</value>
        <docblock line="123">
          <description>Version.</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="public" line="131" namespace="global" package="Default">
        <name>$CURL_OPTS</name>
        <default>array(CURLOPT_CONNECTTIMEOUT =&gt; 10, CURLOPT_RETURNTRANSFER =&gt; true, CURLOPT_TIMEOUT =&gt; 60, CURLOPT_USERAGENT =&gt; 'facebook-php-3.1')</default>
        <docblock line="128">
          <description>Default options for curl.</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="142" namespace="global" package="Default">
        <name>$DROP_QUERY_PARAMS</name>
        <default>array('code', 'state', 'signed_request')</default>
        <docblock line="138">
          <description>List of query parameters that get automatically dropped when rebuilding
the current URL.</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="151" namespace="global" package="Default">
        <name>$DOMAIN_MAP</name>
        <default>array('api' =&gt; 'https://api.facebook.com/', 'api_video' =&gt; 'https://api-video.facebook.com/', 'api_read' =&gt; 'https://api-read.facebook.com/', 'graph' =&gt; 'https://graph.facebook.com/', 'www' =&gt; 'https://www.facebook.com/')</default>
        <docblock line="148">
          <description>Maps aliases to Facebook domains.</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="164" namespace="global" package="Default">
        <name>$appId</name>
        <default/>
        <docblock line="159">
          <description>The Application ID.</description>
          <long-description/>
          <tag line="159" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="171" namespace="global" package="Default">
        <name>$apiSecret</name>
        <default/>
        <docblock line="166">
          <description>The Application API Secret.</description>
          <long-description/>
          <tag line="166" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="178" namespace="global" package="Default">
        <name>$user</name>
        <default/>
        <docblock line="173">
          <description>The ID of the Facebook user, or 0 if the user is logged out.</description>
          <long-description/>
          <tag line="173" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="183" namespace="global" package="Default">
        <name>$signedRequest</name>
        <default/>
        <docblock line="180">
          <description>The data from the signed_request token.</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="188" namespace="global" package="Default">
        <name>$state</name>
        <default/>
        <docblock line="185">
          <description>A CSRF state variable to assist in the defense against CSRF attacks.</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="196" namespace="global" package="Default">
        <name>$accessToken</name>
        <default>null</default>
        <docblock line="190">
          <description>The OAuth access token received in exchange for a valid authorization
code.</description>
          <long-description>&lt;p&gt;null means the access token has yet to be determined.&lt;/p&gt;</long-description>
          <tag line="190" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="203" namespace="global" package="Default">
        <name>$fileUploadSupport</name>
        <default>false</default>
        <docblock line="198">
          <description>Indicates if the CURL based @ syntax for file uploads is enabled.</description>
          <long-description/>
          <tag line="198" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="215" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="205">
          <description>Initialize a Facebook Application.</description>
          <long-description>&lt;p&gt;The configuration:
- appId: the application ID
- secret: the application secret
- fileUpload: (optional) boolean indicating if file uploads are enabled&lt;/p&gt;</long-description>
          <tag line="205" name="param" description="The application configuration" type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="215">
          <name>$config</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="234" package="Default">
        <name>setAppId</name>
        <full_name>setAppId</full_name>
        <docblock line="228">
          <description>Set the Application ID.</description>
          <long-description/>
          <tag line="228" name="param" description="The Application ID" type="string" variable="$appId">
            <type by_reference="false">string</type>
          </tag>
          <tag line="228" name="return" description="" type="\BaseFacebook">
            <type by_reference="false">\BaseFacebook</type>
          </tag>
        </docblock>
        <argument line="234">
          <name>$appId</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="244" package="Default">
        <name>getAppId</name>
        <full_name>getAppId</full_name>
        <docblock line="239">
          <description>Get the Application ID.</description>
          <long-description/>
          <tag line="239" name="return" description="the Application ID" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="254" package="Default">
        <name>setApiSecret</name>
        <full_name>setApiSecret</full_name>
        <docblock line="248">
          <description>Set the API Secret.</description>
          <long-description/>
          <tag line="248" name="param" description="The API Secret" type="string" variable="$apiSecret">
            <type by_reference="false">string</type>
          </tag>
          <tag line="248" name="return" description="" type="\BaseFacebook">
            <type by_reference="false">\BaseFacebook</type>
          </tag>
        </docblock>
        <argument line="254">
          <name>$apiSecret</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="264" package="Default">
        <name>getApiSecret</name>
        <full_name>getApiSecret</full_name>
        <docblock line="259">
          <description>Get the API Secret.</description>
          <long-description/>
          <tag line="259" name="return" description="the API Secret" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="274" package="Default">
        <name>setFileUploadSupport</name>
        <full_name>setFileUploadSupport</full_name>
        <docblock line="268">
          <description>Set the file upload support status.</description>
          <long-description/>
          <tag line="268" name="param" description="The file upload support status." type="boolean" variable="$fileUploadSupport">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="268" name="return" description="" type="\BaseFacebook">
            <type by_reference="false">\BaseFacebook</type>
          </tag>
        </docblock>
        <argument line="274">
          <name>$fileUploadSupport</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="284" package="Default">
        <name>useFileUploadSupport</name>
        <full_name>useFileUploadSupport</full_name>
        <docblock line="279">
          <description>Get the file upload support status.</description>
          <long-description/>
          <tag line="279" name="return" description="true if and only if the server supports file upload." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="296" package="Default">
        <name>setAccessToken</name>
        <full_name>setAccessToken</full_name>
        <docblock line="288">
          <description>Sets the access token for api calls.</description>
          <long-description>&lt;p&gt;Use this if you get
your access token by other means and just want the SDK
to use it.&lt;/p&gt;</long-description>
          <tag line="288" name="param" description="an access token." type="string" variable="$access_token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="288" name="return" description="" type="\BaseFacebook">
            <type by_reference="false">\BaseFacebook</type>
          </tag>
        </docblock>
        <argument line="296">
          <name>$access_token</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="310" package="Default">
        <name>getAccessToken</name>
        <full_name>getAccessToken</full_name>
        <docblock line="301">
          <description>Determines the access token that should be used for API calls.</description>
          <long-description>&lt;p&gt;The first time this is called, $this-&gt;accessToken is set equal
to either a valid user access token, or it's set to the application
access token if a valid user access token wasn't available.  Subsequent
calls return whatever the first call returned.&lt;/p&gt;</long-description>
          <tag line="301" name="return" description="The access token" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="338" package="Default">
        <name>getUserAccessToken</name>
        <full_name>getUserAccessToken</full_name>
        <docblock line="328">
          <description>Determines and returns the user access token, first using
the signed request if present, and then falling back on
the authorization code if present.</description>
          <long-description>&lt;p&gt;The intent is to
return a valid user access token, or false if one is determined
to not be available.&lt;/p&gt;</long-description>
          <tag line="328" name="return" description="A valid user access token, or false if one&#13;&#10;               could not be determined." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="396" package="Default">
        <name>getSignedRequest</name>
        <full_name>getSignedRequest</full_name>
        <docblock line="390">
          <description>Retrieve the signed request, either from a request parameter or,
if not present, from a cookie.</description>
          <long-description/>
          <tag line="390" name="return" description="the signed request, if available, or null otherwise." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="415" package="Default">
        <name>getUser</name>
        <full_name>getUser</full_name>
        <docblock line="409">
          <description>Get the UID of the connected user, or 0
if the Facebook user is not connected.</description>
          <long-description/>
          <tag line="409" name="return" description="the UID if available." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="432" package="Default">
        <name>getUserFromAvailableData</name>
        <full_name>getUserFromAvailableData</full_name>
        <docblock line="424">
          <description>Determines the connected user by first examining any signed
requests, then considering an authorization code, and then
falling back to any persistent store storing the user.</description>
          <long-description/>
          <tag line="424" name="return" description="The id of the connected Facebook user,&#13;&#10;                or 0 if no such user exists." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="481" package="Default">
        <name>getLoginUrl</name>
        <full_name>getLoginUrl</full_name>
        <docblock line="469">
          <description>Get a Login URL for use with redirects.</description>
          <long-description>&lt;p&gt;By default, full page redirect is
assumed. If you are using the generated URL with a window.open() call in
JavaScript, you can pass in display=popup as part of the $params.&lt;/p&gt;

&lt;p&gt;The parameters:
- redirect_uri: the url to go to after a successful login
- scope: comma separated list of requested extended perms&lt;/p&gt;</long-description>
          <tag line="469" name="param" description="Provide custom parameters" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="469" name="return" description="The URL for the login flow" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="481">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="510" package="Default">
        <name>getLogoutUrl</name>
        <full_name>getLogoutUrl</full_name>
        <docblock line="501">
          <description>Get a Logout URL suitable for use with redirects.</description>
          <long-description>&lt;p&gt;The parameters:
- next: the url to go to after a successful logout&lt;/p&gt;</long-description>
          <tag line="501" name="param" description="Provide custom parameters" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="501" name="return" description="The URL for the logout flow" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="510">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="532" package="Default">
        <name>getLoginStatusUrl</name>
        <full_name>getLoginStatusUrl</full_name>
        <docblock line="521">
          <description>Get a login status URL to fetch the status from Facebook.</description>
          <long-description>&lt;p&gt;The parameters:
- ok_session: the URL to go to if a session is found
- no_session: the URL to go to if the user is not connected
- no_user: the URL to go to if the user is not signed into facebook&lt;/p&gt;</long-description>
          <tag line="521" name="param" description="Provide custom parameters" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="521" name="return" description="The URL for the logout flow" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="532">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="551" package="Default">
        <name>api</name>
        <full_name>api</full_name>
        <docblock line="546">
          <description>Make an API call.</description>
          <long-description/>
          <tag line="546" name="return" description="The decoded response" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="569" package="Default">
        <name>getSignedRequestCookieName</name>
        <full_name>getSignedRequestCookieName</full_name>
        <docblock line="560">
          <description>Constructs and returns the name of the cookie that
potentially houses the signed request for the app user.</description>
          <long-description>&lt;p&gt;The cookie is not set by the BaseFacebook class, but
it may be set by the JavaScript SDK.&lt;/p&gt;</long-description>
          <tag line="560" name="return" description="the name of the cookie that would house&#13;&#10;        the signed request value." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="581" package="Default">
        <name>getCode</name>
        <full_name>getCode</full_name>
        <docblock line="573">
          <description>Get the authorization code from the query parameters, if it exists,
and otherwise return false to signal no authorization code was
discoverable.</description>
          <long-description/>
          <tag line="573" name="return" description="The authorization code, or false if the authorization&#13;&#10;              code could not be determined." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="610" package="Default">
        <name>getUserFromAccessToken</name>
        <full_name>getUserFromAccessToken</full_name>
        <docblock line="600">
          <description>Retrieves the UID with the understanding that
$this-&gt;accessToken has already been set and is
seemingly legitimate.</description>
          <long-description>&lt;p&gt;It relies on Facebook's Graph API
to retrieve user information and then extract
the user ID.&lt;/p&gt;</long-description>
          <tag line="600" name="return" description="Returns the UID of the Facebook user, or 0&#13;&#10;                if the Facebook user could not be determined." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="626" package="Default">
        <name>getApplicationAccessToken</name>
        <full_name>getApplicationAccessToken</full_name>
        <docblock line="619">
          <description>Returns the access token that should be used for logged out
users when no authorization code is available.</description>
          <long-description/>
          <tag line="619" name="return" description="The application access token, useful for gathering&#13;&#10;               public information about users and applications." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="635" package="Default">
        <name>establishCSRFTokenState</name>
        <full_name>establishCSRFTokenState</full_name>
        <docblock line="630">
          <description>Lays down a CSRF state token for this process.</description>
          <long-description/>
          <tag line="630" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="655" package="Default">
        <name>getAccessTokenFromCode</name>
        <full_name>getAccessTokenFromCode</full_name>
        <docblock line="642">
          <description>Retrieves an access token for the given authorization code
(previously generated from www.facebook.com on behalf of
a specific user).</description>
          <long-description>&lt;p&gt;The authorization code is sent to graph.facebook.com
and a legitimate access token is generated provided the access token
and the user for which it was generated all match, and the user is
either logged in to Facebook or has granted an offline access permission.&lt;/p&gt;</long-description>
          <tag line="642" name="param" description="An authorization code." type="string" variable="$code">
            <type by_reference="false">string</type>
          </tag>
          <tag line="642" name="param" description="URI where to redirect after authorization" type="string" variable="$redirect_uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="642" name="return" description="An access token exchanged for the authorization code, or&#13;&#10;              false if an access token could not be generated." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="655">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
        <argument line="655">
          <name>$redirect_uri</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="701" package="Default">
        <name>_restserver</name>
        <full_name>_restserver</full_name>
        <docblock line="693">
          <description>Invoke the old restserver.php endpoint.</description>
          <long-description/>
          <tag line="693" name="param" description="Method call object" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="693" name="return" description="The decoded response object" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="693" name="throws" description="" type="\FacebookApiException">
            <type by_reference="false">\FacebookApiException</type>
          </tag>
        </docblock>
        <argument line="701">
          <name>$params</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="734" package="Default">
        <name>_graph</name>
        <full_name>_graph</full_name>
        <docblock line="724">
          <description>Invoke the Graph API.</description>
          <long-description/>
          <tag line="724" name="param" description="The path (required)" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="724" name="param" description="The http method (default 'GET')" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="724" name="param" description="The query/post data" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="724" name="return" description="The decoded response object" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="724" name="throws" description="" type="\FacebookApiException">
            <type by_reference="false">\FacebookApiException</type>
          </tag>
        </docblock>
        <argument line="734">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="734">
          <name>$method</name>
          <default>'GET'</default>
          <type/>
        </argument>
        <argument line="734">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="763" package="Default">
        <name>_oauthRequest</name>
        <full_name>_oauthRequest</full_name>
        <docblock line="754">
          <description>Make a OAuth Request.</description>
          <long-description/>
          <tag line="754" name="param" description="The path (required)" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
          <tag line="754" name="param" description="The query/post data" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="754" name="return" description="The decoded response object" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="754" name="throws" description="" type="\FacebookApiException">
            <type by_reference="false">\FacebookApiException</type>
          </tag>
        </docblock>
        <argument line="763">
          <name>$url</name>
          <default/>
          <type/>
        </argument>
        <argument line="763">
          <name>$params</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="789" package="Default">
        <name>makeRequest</name>
        <full_name>makeRequest</full_name>
        <docblock line="778">
          <description>Makes an HTTP request.</description>
          <long-description>&lt;p&gt;This method can be overridden by subclasses if
developers want to do fancier things or use something other than curl to
make the request.&lt;/p&gt;</long-description>
          <tag line="778" name="param" description="The URL to make the request to" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
          <tag line="778" name="param" description="The parameters to use for the POST body" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="778" name="param" description="Initialized curl handle" type="\CurlHandler" variable="$ch">
            <type by_reference="false">\CurlHandler</type>
          </tag>
          <tag line="778" name="return" description="The response text" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="789">
          <name>$url</name>
          <default/>
          <type/>
        </argument>
        <argument line="789">
          <name>$params</name>
          <default/>
          <type/>
        </argument>
        <argument line="789">
          <name>$ch</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="844" package="Default">
        <name>parseSignedRequest</name>
        <full_name>parseSignedRequest</full_name>
        <docblock line="838">
          <description>Parses a signed_request and validates the signature.</description>
          <long-description/>
          <tag line="838" name="param" description="A signed token" type="string" variable="$signed_request">
            <type by_reference="false">string</type>
          </tag>
          <tag line="838" name="return" description="The payload inside it or null if the sig is wrong" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="844">
          <name>$signed_request</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="873" package="Default">
        <name>getApiUrl</name>
        <full_name>getApiUrl</full_name>
        <docblock line="867">
          <description>Build the URL for api given parameters.</description>
          <long-description/>
          <tag line="867" name="param" description="String the method name." type="\" variable="$method"/>
          <tag line="867" name="return" description="The URL for the given parameters" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="873">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="953" package="Default">
        <name>getUrl</name>
        <full_name>getUrl</full_name>
        <docblock line="944">
          <description>Build the URL for given domain alias, path and parameters.</description>
          <long-description/>
          <tag line="944" name="param" description="string The name of the domain" type="\" variable="$name"/>
          <tag line="944" name="param" description="string Optional path (without a leading slash)" type="\" variable="$path"/>
          <tag line="944" name="param" description="array Optional query parameters" type="\" variable="$params"/>
          <tag line="944" name="return" description="The URL for the given parameters" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="953">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="953">
          <name>$path</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="953">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="974" package="Default">
        <name>getCurrentUrl</name>
        <full_name>getCurrentUrl</full_name>
        <docblock line="968">
          <description>Returns the Current URL, stripping it of known FB parameters that should
not persist.</description>
          <long-description/>
          <tag line="968" name="return" description="The current URL" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1024" package="Default">
        <name>shouldRetainParam</name>
        <full_name>shouldRetainParam</full_name>
        <docblock line="1013">
          <description>Returns true if and only if the key or key/value pair should
be retained as part of the query string.</description>
          <long-description>&lt;p&gt;This amounts to
a brute-force search of the very small list of Facebook-specific
params that should be stripped out.&lt;/p&gt;</long-description>
          <tag line="1013" name="param" description="A key or key/value pair within a URL's query (e.g.&#13;&#10;                    'foo=a', 'foo=', or 'foo'." type="string" variable="$param">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1013" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1024">
          <name>$param</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1042" package="Default">
        <name>throwAPIException</name>
        <full_name>throwAPIException</full_name>
        <docblock line="1034">
          <description>Analyzes the supplied result to see if it was thrown
because the access token is no longer valid.</description>
          <long-description>&lt;p&gt;If that is
the case, then the persistent store is cleared.&lt;/p&gt;</long-description>
          <tag line="1034" name="param" description="array A record storing the error message returned&#13;&#10;                     by a failed API call." type="\" variable="$result"/>
        </docblock>
        <argument line="1042">
          <name>$result</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="1069" package="Default">
        <name>errorLog</name>
        <full_name>errorLog</full_name>
        <docblock line="1064">
          <description>Prints to the error log if you aren't in command line mode.</description>
          <long-description/>
          <tag line="1064" name="param" description="Log message" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1069">
          <name>$msg</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="1089" package="Default">
        <name>base64UrlDecode</name>
        <full_name>base64UrlDecode</full_name>
        <docblock line="1080">
          <description>Base64 encoding that doesn't need to be urlencode()ed.</description>
          <long-description>&lt;p&gt;Exactly the same as base64_encode except it uses
  - instead of +
  _ instead of /&lt;/p&gt;</long-description>
          <tag line="1080" name="param" description="base64UrlEncoded string" type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1080" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1089">
          <name>$input</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1096" package="Default">
        <name>destroySession</name>
        <full_name>destroySession</full_name>
        <docblock line="1093">
          <description>Destroy the current session</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="global" line="1121" package="Default">
        <name>setPersistentData</name>
        <full_name>setPersistentData</full_name>
        <docblock line="1112">
          <description>Stores the given ($key, $value) pair, so that future calls to
getPersistentData($key) return $value.</description>
          <long-description>&lt;p&gt;This call may be in another request.&lt;/p&gt;</long-description>
          <tag line="1112" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1112" name="param" description="" type="array" variable="$value">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1112" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="1121">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="1121">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="global" line="1131" package="Default">
        <name>getPersistentData</name>
        <full_name>getPersistentData</full_name>
        <docblock line="1123">
          <description>Get the data for $key, persisted by BaseFacebook::setPersistentData()</description>
          <long-description/>
          <tag line="1123" name="param" description="The key of the data to retrieve" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1123" name="param" description="The default value to return if $key is not found" type="boolean" variable="$default">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="1123" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="1131">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="1131">
          <name>$default</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="global" line="1139" package="Default">
        <name>clearPersistentData</name>
        <full_name>clearPersistentData</full_name>
        <docblock line="1133">
          <description>Clear the data with $key from the persistent storage</description>
          <long-description/>
          <tag line="1133" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1133" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="1139">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="global" line="1146" package="Default">
        <name>clearAllPersistentData</name>
        <full_name>clearAllPersistentData</full_name>
        <docblock line="1141">
          <description>Clear all data from the persistent storage</description>
          <long-description/>
          <tag line="1141" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="facebook\facebook.php" hash="000f19fc9477abdf44cf18f758c0d539" package="Default">
    <docblock line="2">
      <description>Copyright 2011 Facebook, Inc.</description>
      <long-description>&lt;p&gt;Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.&lt;/p&gt;</long-description>
    </docblock>
    <include line="21" type="Require Once" package="Default">
      <name>base_facebook.php</name>
      <docblock line="18">
        <description>Get main functions</description>
        <long-description/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="30" package="Social\Facebook">
      <extends>\BaseFacebook</extends>
      <name>Facebook</name>
      <full_name>\Facebook</full_name>
      <docblock line="23">
        <description>Extends the BaseFacebook class with the intent of using
PHP sessions to store user ids and access tokens.</description>
        <long-description/>
        <tag line="23" name="author" description="Facebook Inc"/>
        <tag line="23" name="package" description="Social"/>
        <tag line="23" name="subpackage" description="Facebook"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="48" namespace="global" package="Default">
        <name>$kSupportedKeys</name>
        <default>array('state', 'code', 'access_token', 'user_id')</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Social\Facebook">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="32">
          <description>Identical to the parent constructor, except that
we start a PHP session to store the user ID and
access token if during the course of execution
we discover them.</description>
          <long-description/>
          <tag line="32" name="param" description="the application configuration." type="Array" variable="$config">
            <type by_reference="false">Array</type>
          </tag>
          <tag line="32" name="see" description="in facebook.php" refers="\BaseFacebook::__construct"/>
        </docblock>
        <argument line="41">
          <name>$config</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="57" package="Social\Facebook">
        <name>setPersistentData</name>
        <full_name>setPersistentData</full_name>
        <docblock line="51">
          <description>Provides the implementations of the inherited abstract
methods.</description>
          <long-description>&lt;p&gt;The implementation uses PHP sessions to maintain
a store for authorization codes, user ids, CSRF states, and
access tokens.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="57">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="57">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="67" package="Social\Facebook">
        <name>getPersistentData</name>
        <full_name>getPersistentData</full_name>
        <argument line="67">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="67">
          <name>$default</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="78" package="Social\Facebook">
        <name>clearPersistentData</name>
        <full_name>clearPersistentData</full_name>
        <argument line="78">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="88" package="Social\Facebook">
        <name>clearAllPersistentData</name>
        <full_name>clearAllPersistentData</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="94" package="Social\Facebook">
        <name>constructSessionVariableName</name>
        <full_name>constructSessionVariableName</full_name>
        <argument line="94">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="48" code="50018">No DocBlock was found for property $kSupportedKeys</error>
      <error line="51" code="50015">Argument $key is missing from the Docblock of setPersistentData()</error>
      <error line="51" code="50015">Argument $value is missing from the Docblock of setPersistentData()</error>
      <error line="67" code="50010">No DocBlock was found for method getPersistentData()</error>
      <error line="78" code="50010">No DocBlock was found for method clearPersistentData()</error>
      <error line="88" code="50010">No DocBlock was found for method clearAllPersistentData()</error>
      <error line="94" code="50010">No DocBlock was found for method constructSessionVariableName()</error>
    </parse_markers>
  </file>
  <file path="fb.class.php" hash="19642cea2178ef882489de878e54c8ad" package="Default">
    <docblock line="2">
      <description>Facebook abstraction layer</description>
      <long-description/>
    </docblock>
    <include line="10" type="Include" package="Default">
      <name>facebook/facebook.php</name>
    </include>
    <class final="false" abstract="false" namespace="global" line="21" package="Social\Facebook">
      <extends/>
      <name>FB</name>
      <full_name>\FB</full_name>
      <docblock line="13">
        <description>Facebook Abstraction layer
It uses the official Facebook PHP API</description>
        <long-description/>
        <tag line="13" name="author" description="Alejandro U. Alvarez"/>
        <tag line="13" name="version" description="2.0"/>
        <tag line="13" name="package" description="Social"/>
        <tag line="13" name="subpackage" description="Facebook"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="25" namespace="global" package="Default">
        <name>$facebook</name>
        <default/>
        <docblock line="22">
          <description>Facebook API object</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" namespace="global" package="Default">
        <name>$fbid</name>
        <default>false</default>
        <docblock line="26">
          <description>Facebook account ID</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="34" namespace="global" package="Default">
        <name>$appid</name>
        <default>'174758345954243'</default>
        <docblock line="30">
          <description>Facebook App ID</description>
          <long-description/>
          <tag line="30" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" namespace="global" package="Default">
        <name>$secret</name>
        <default>'4ea51f49f6c49bcca3c42ad97e045174'</default>
        <docblock line="35">
          <description>Facebook App secret</description>
          <long-description/>
          <tag line="35" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" namespace="global" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="40">
          <description>Facebook user name</description>
          <long-description/>
          <tag line="40" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" namespace="global" package="Default">
        <name>$email</name>
        <default/>
        <docblock line="45">
          <description>Facebook associated email address</description>
          <long-description/>
          <tag line="45" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54" namespace="global" package="Default">
        <name>$pic_big</name>
        <default/>
        <docblock line="50">
          <description>Facebook profile picture: Original size</description>
          <long-description/>
          <tag line="50" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" namespace="global" package="Default">
        <name>$pic_square</name>
        <default/>
        <docblock line="55">
          <description>Facebook profile picture: Squared version</description>
          <long-description/>
          <tag line="55" name="access" description="protected"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="Social\Facebook">
        <name>FB</name>
        <full_name>FB</full_name>
        <docblock line="61">
          <description>Creates a new Facebook Object</description>
          <long-description/>
          <tag line="61" name="param" description="facebook Account ID" type="int" variable="$fbid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="61" name="return" description="Facebook Object" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$fbid</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Social\Facebook">
        <name>init</name>
        <full_name>init</full_name>
        <docblock line="71">
          <description>Initialize Facebook Object</description>
          <long-description/>
          <tag line="71" name="param" description="Facebook Account ID" type="int" variable="$fbid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="71" name="see" description="\FB" refers="\FB"/>
        </docblock>
        <argument line="76">
          <name>$fbid</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="102" package="Social\Facebook">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="97">
          <description>Get an attribute from facebook</description>
          <long-description/>
          <tag line="97" name="param" description="Attribute name" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="97" name="return" description="Attribute value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$what</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="115" package="Social\Facebook">
        <name>set</name>
        <full_name>set</full_name>
        <docblock line="108">
          <description>Set an attribute</description>
          <long-description/>
          <tag line="108" name="param" description="Attribute name" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="108" name="param" description="Attribute value" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
          <tag line="108" name="param" description="Whether to update the Database" type="boolean" variable="$updateDB">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="108" name="return" description="Attribute value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$what</name>
          <default/>
          <type/>
        </argument>
        <argument line="115">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="115">
          <name>$updateDB</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="126" package="Social\Facebook">
        <name>loadFromSession</name>
        <full_name>loadFromSession</full_name>
        <docblock line="123">
          <description>Load a Facebook account from a user Session</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="142" package="Social\Facebook">
        <name>updateDB</name>
        <full_name>updateDB</full_name>
        <docblock line="136">
          <description>Update DB cache (Fields &amp; values can be arrays)</description>
          <long-description/>
          <tag line="136" name="param" description="Fields to be updated, it can also be a string to update only one field" type="array" variable="$fields">
            <type by_reference="false">array</type>
          </tag>
          <tag line="136" name="param" description="Values, in the same format as the fields" type="array" variable="$values">
            <type by_reference="false">array</type>
          </tag>
          <tag line="136" name="return" description="Whether the operation was successful" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$fields</name>
          <default/>
          <type/>
        </argument>
        <argument line="142">
          <name>$values</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="169" package="Social\Facebook">
        <name>getFromFacebook</name>
        <full_name>getFromFacebook</full_name>
        <docblock line="163">
          <description>Get data from Facebook</description>
          <long-description/>
          <tag line="163" name="param" description="Data to be fetched" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
          <tag line="163" name="access" description="private"/>
          <tag line="163" name="return" description="Data from facebook, false if not available" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="185" package="Social\Facebook">
        <name>getDB</name>
        <full_name>getDB</full_name>
        <docblock line="179">
          <description>Get data from Database cache</description>
          <long-description/>
          <tag line="179" name="param" description="Data to be fetched" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="179" name="access" description="private"/>
          <tag line="179" name="return" description="Data from DB, false if not available" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="185">
          <name>$what</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="210" package="Social\Facebook">
        <name>logged</name>
        <full_name>logged</full_name>
        <docblock line="206">
          <description>Determine whether user has logged in Facebook</description>
          <long-description/>
          <tag line="206" name="return" description="Facebook session state" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="224" package="Social\Facebook">
        <name>checkFBuser</name>
        <full_name>checkFBuser</full_name>
        <docblock line="219">
          <description>Check if FB user is on database</description>
          <long-description/>
          <tag line="219" name="param" description="[Optional] Facebook account ID" type="int" variable="$fbid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="219" name="return" description="QuePiensas user ID if found, false otherwise" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="224">
          <name>$fbid</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="239" package="Social\Facebook">
        <name>addFBuser</name>
        <full_name>addFBuser</full_name>
        <docblock line="235">
          <description>Update or Insert data for a facebook user (Using REPLACE)</description>
          <long-description/>
          <tag line="235" name="param" description="Whether checkFBuser has been run" type="boolean" variable="$checked">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="239">
          <name>$checked</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="256" package="Social\Facebook">
        <name>checkDB</name>
        <full_name>checkDB</full_name>
        <docblock line="252">
          <description>Check if a facebook account is already in the database</description>
          <long-description/>
          <tag line="252" name="param" description="Facebook account id" type="int" variable="$fbid">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="256">
          <name>$fbid</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="272" package="Social\Facebook">
        <name>name</name>
        <full_name>name</full_name>
        <docblock line="268">
          <description>Get Facebook name</description>
          <long-description/>
          <tag line="268" name="return" description="Facebook name" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="281" package="Social\Facebook">
        <name>email</name>
        <full_name>email</full_name>
        <docblock line="277">
          <description>Get Facebook associated email</description>
          <long-description/>
          <tag line="277" name="return" description="associated email" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="291" package="Social\Facebook">
        <name>pic</name>
        <full_name>pic</full_name>
        <docblock line="286">
          <description>Get Facebook profile picture</description>
          <long-description/>
          <tag line="286" name="param" description="Image type: big or square" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="286" name="return" description="User profile pic" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="291">
          <name>$type</name>
          <default>'big'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="308" package="Social\Facebook">
        <name>getPic</name>
        <full_name>getPic</full_name>
        <docblock line="303">
          <description>Get Facebook profile picture from facebook</description>
          <long-description/>
          <tag line="303" name="param" description="Image type: big or square" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="303" name="return" description="User profile pic" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="308">
          <name>$type</name>
          <default>'big'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="331" package="Social\Facebook">
        <name>fbLogin</name>
        <full_name>fbLogin</full_name>
        <docblock line="327">
          <description>Get Facebook login link</description>
          <long-description/>
          <tag line="327" name="return" description="Login link or # if not available" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="347" package="Social\Facebook">
        <name>getFriends</name>
        <full_name>getFriends</full_name>
        <docblock line="343">
          <description>Generate a txt file with all friends from the user</description>
          <long-description/>
          <tag line="343" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="fbimport.php" hash="1719213bd78ae365ce709c00752eaae0" package="Default">
    <docblock line="2">
      <description>Facebook Friend import script
it should run inside a cron job</description>
      <long-description/>
    </docblock>
    <include line="16" type="Include" package="Default">
      <name>db.php</name>
    </include>
  </file>
  <file path="fbParserRelationer.php" hash="19b74c9238873f3b2eecdd5b20aee567" package="Default">
    <docblock line="2">
      <description>Parsea los amigos importados de Facebook de {fbimport
Crea nuevas personas si hace falta y nuevas relaciones</description>
      <long-description/>
    </docblock>
    <include line="8" type="Include" package="Default">
      <name>db.php</name>
    </include>
  </file>
  <file path="funciones.php" hash="de918e75c9ab611db2657ebcc5e6a2bc" package="Default">
    <docblock line="2">
      <description>Some global namespaced functions</description>
      <long-description/>
    </docblock>
    <function namespace="global" line="9" package="Default">
      <name>menu</name>
      <full_name>\menu</full_name>
      <docblock line="6">
        <description>Generate the right hand menu</description>
        <long-description/>
      </docblock>
    </function>
  </file>
  <file path="getip.php" hash="c386213af3e172f794b45bacbc031329" package="Default">
    <docblock line="2">
      <description>IP detection functions</description>
      <long-description/>
    </docblock>
    <function namespace="global" line="11" package="Default">
      <name>ip_first</name>
      <full_name>\ip_first</full_name>
      <docblock line="6">
        <description>Get first part of the IP address</description>
        <long-description/>
        <tag line="6" name="param" description="IP address" type="string" variable="$ips">
          <type by_reference="false">string</type>
        </tag>
        <tag line="6" name="access" description="private"/>
      </docblock>
      <argument line="11">
        <name>$ips</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="24" package="Default">
      <name>ip_valid</name>
      <full_name>\ip_valid</full_name>
      <docblock line="19">
        <description>Check if an IP address is valid</description>
        <long-description/>
        <tag line="19" name="access" description="private"/>
        <tag line="19" name="param" description="IP address" type="string" variable="$ips">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="24">
        <name>$ips</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="41" package="Default">
      <name>ip</name>
      <full_name>\ip</full_name>
      <docblock line="38">
        <description>Get user IP address</description>
        <long-description/>
      </docblock>
    </function>
  </file>
  <file path="linker.php" hash="9aec205c046c9d17f31a39ddca189c3c" package="Default">
    <docblock line="2">
      <description>This is a text formatter.</description>
      <long-description>&lt;p&gt;It scans a text for URLs, and then it processes them to display cool stuff.&lt;/p&gt;</long-description>
      <tag line="2" name="author" description="Alejandro U. Alvarez"/>
      <tag line="2" name="version" description="1.3"/>
      <tag line="2" name="namespace" description="format"/>
    </docblock>
    <function namespace="global" line="19" package="Default">
      <name>parse</name>
      <full_name>\parse</full_name>
      <docblock line="11">
        <description>Main parsing function, all options are true by default.</description>
        <long-description/>
        <tag line="11" name="param" description="Text to be formatted" type="string" variable="$text">
          <type by_reference="false">string</type>
        </tag>
        <tag line="11" name="param" description="Whether you want to parse links" type="boolean" variable="$links">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="11" name="param" description="Whether you want to parse videos" type="boolean" variable="$videos">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="11" name="param" description="Whether you want to parse images" type="boolean" variable="$img">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="11" name="return" description="Formatted text" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="19">
        <name>$text</name>
        <default/>
        <type/>
      </argument>
      <argument line="19">
        <name>$links</name>
        <default>true</default>
        <type/>
      </argument>
      <argument line="19">
        <name>$videos</name>
        <default>true</default>
        <type/>
      </argument>
      <argument line="19">
        <name>$img</name>
        <default>true</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="35" package="Default">
      <name>shortURL</name>
      <full_name>\shortURL</full_name>
      <docblock line="30">
        <description>Shorten URL using the is.gd service, it doesn't check if URL is valid</description>
        <long-description/>
        <tag line="30" name="param" description="URL to be shortened" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="30" name="return" description="Shortened URL" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="35">
        <name>$url</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="51" package="Default">
      <name>parseUrl</name>
      <full_name>\parseUrl</full_name>
      <docblock line="45">
        <description>Analyze found URLs to be parsed depending on the type</description>
        <long-description/>
        <tag line="45" name="param" description="URL" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="45" name="access" description="private"/>
        <tag line="45" name="return" description="Formatted URL" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="51">
        <name>$url</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="87" package="Default">
      <name>checkProvider</name>
      <full_name>\checkProvider</full_name>
      <docblock line="81">
        <description>Checks if the found host is supported by Embed.ly</description>
        <long-description/>
        <tag line="81" name="param" description="Provider name" type="string" variable="$provider">
          <type by_reference="false">string</type>
        </tag>
        <tag line="81" name="access" description="private"/>
        <tag line="81" name="return" description="Whether the provider is supported" type="boolean">
          <type by_reference="false">boolean</type>
        </tag>
      </docblock>
      <argument line="87">
        <name>$provider</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="98" package="Default">
      <name>embed</name>
      <full_name>\embed</full_name>
      <docblock line="92">
        <description>Wraps a URL in the standard embedding HTML structure.</description>
        <long-description>&lt;p&gt;An AJAX call will then handle the actual embedding&lt;/p&gt;</long-description>
        <tag line="92" name="param" description="URL that should be embedded" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="92" name="access" description="private"/>
        <tag line="92" name="return" description="HTML structure" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="98">
        <name>$url</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="106" package="Default">
      <name>spotify</name>
      <full_name>\spotify</full_name>
      <docblock line="101">
        <description>Takes a Spotify URI (http://open.spotify.com/album/7bzGP9L5ddjSkMGlYphoGO) and returns it ready to be parsed by AJAX</description>
        <long-description/>
        <tag line="101" name="access" description="private"/>
        <tag line="101" name="param" description="Spotify URI" type="string" variable="$params">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="106">
        <name>$params</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="115" package="Default">
      <name>spotify2</name>
      <full_name>\spotify2</full_name>
      <docblock line="110">
        <description>Takes a Spotify URL and returns it ready to be parsed by AJAX</description>
        <long-description/>
        <tag line="110" name="access" description="private"/>
        <tag line="110" name="param" description="Spotify URL" type="string" variable="$params">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="115">
        <name>$params</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="124" package="Default">
      <name>sound</name>
      <full_name>\sound</full_name>
      <docblock line="118">
        <description>Changes a link to the corresponding sound button</description>
        <long-description/>
        <tag line="118" name="param" description="Sound name" type="string" variable="$link">
          <type by_reference="false">string</type>
        </tag>
        <tag line="118" name="access" description="private"/>
        <tag line="118" name="return" description="HTML Flash object" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="124">
        <name>$link</name>
        <default/>
        <type/>
      </argument>
    </function>
  </file>
  <file path="person.php" hash="618f90af3684be8d2f374aab39d22bfa" package="Default">
    <docblock line="2">
      <description>Person class</description>
      <long-description/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="13" package="Users">
      <extends/>
      <name>Person</name>
      <full_name>\Person</full_name>
      <docblock line="5">
        <description>Person management for QuePiensas</description>
        <long-description>&lt;p&gt;It takes care of all CRUD operations on people&lt;/p&gt;</long-description>
        <tag line="5" name="author" description="Alejandro U. Alvarez"/>
        <tag line="5" name="version" description="1.0"/>
        <tag line="5" name="package" description="Users"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="17" namespace="global" package="Default">
        <name>$pid</name>
        <default/>
        <docblock line="14">
          <description>Person ID</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="21" namespace="global" package="Default">
        <name>$fbid</name>
        <default/>
        <docblock line="18">
          <description>Facebook ID, if the person is verified</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="25" namespace="global" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="22">
          <description>Person name</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" namespace="global" package="Default">
        <name>$visits</name>
        <default/>
        <docblock line="26">
          <description>Number of visits</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="33" namespace="global" package="Default">
        <name>$comments</name>
        <default/>
        <docblock line="30">
          <description>Number of comments</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="37" namespace="global" package="Default">
        <name>$location</name>
        <default/>
        <docblock line="34">
          <description>Location</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Users">
        <name>Person</name>
        <full_name>Person</full_name>
        <docblock line="39">
          <description>Person constructor</description>
          <long-description/>
          <tag line="39" name="param" description="Person ID" type="int" variable="$pid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="39" name="param" description="Name" type="\stirng" variable="$name">
            <type by_reference="false">\stirng</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$pid</name>
          <default/>
          <type/>
        </argument>
        <argument line="44">
          <name>$name</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="65" package="Users">
        <name>exists</name>
        <full_name>exists</full_name>
        <docblock line="61">
          <description>Check if a person exists</description>
          <long-description/>
          <tag line="61" name="return" description="Whether the person exists" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="86" package="Users">
        <name>post</name>
        <full_name>post</full_name>
        <docblock line="77">
          <description>Store new comment for the person</description>
          <long-description/>
          <tag line="77" name="param" description="Comment text" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="param" description="ID of comment to which this one is replying, 0 if new comment" type="int" variable="$rep">
            <type by_reference="false">int</type>
          </tag>
          <tag line="77" name="param" description="Commenter name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="param" description="Commenter email" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="param" description="Identification mode (See User::sendPM)" type="int" variable="$ident">
            <type by_reference="false">int</type>
          </tag>
          <tag line="77" name="return" description="[Comment ID, Comment text] or false" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$msg</name>
          <default/>
          <type/>
        </argument>
        <argument line="86">
          <name>$rep</name>
          <default/>
          <type/>
        </argument>
        <argument line="86">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="86">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
        <argument line="86">
          <name>$ident</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="123" package="Users">
        <name>create</name>
        <full_name>create</full_name>
        <docblock line="117">
          <description>Create a new person</description>
          <long-description/>
          <tag line="117" name="param" description="Person name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="117" name="param" description="Check if person already exists" type="boolean" variable="$check">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="117" name="return" description="New person ID or false" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="123">
          <name>$check</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="141" package="Users">
        <name>getData</name>
        <full_name>getData</full_name>
        <docblock line="137">
          <description>Get Person data: Name, facebook ID, visits, city, region, contry</description>
          <long-description/>
          <tag line="137" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="166" package="Users">
        <name>addVisit</name>
        <full_name>addVisit</full_name>
        <docblock line="162">
          <description>Adds a visit to the current person</description>
          <long-description/>
          <tag line="162" name="return" description="Whether the visit was added" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="180" package="Users">
        <name>addRelation</name>
        <full_name>addRelation</full_name>
        <docblock line="175">
          <description>Add a point of relationship between the current user and the current person</description>
          <long-description/>
          <tag line="175" name="param" description="Ammount of relationship to add, defaults to 1" type="int" variable="$count">
            <type by_reference="false">int</type>
          </tag>
          <tag line="175" name="return" description="Whether the relationship was added" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$count</name>
          <default>1</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="session.php" hash="73a34305c4103cf54630180e28cf99c5" package="Default">
    <docblock line="2">
      <description>Main file, should be included everywhere where Users are tracked</description>
      <long-description/>
    </docblock>
    <include line="9" type="Include" package="Default">
      <name>lib/php/db.class.php</name>
    </include>
    <include line="10" type="Include" package="Default">
      <name>lib/php/auth.php</name>
    </include>
    <include line="11" type="Include" package="Default">
      <name>lib/php/user.php</name>
    </include>
    <include line="12" type="Include" package="Default">
      <name>lib/php/getip.php</name>
    </include>
    <include line="13" type="Include" package="Default">
      <name>lib/php/fb.class.php</name>
    </include>
    <include line="14" type="Include" package="Default">
      <name>lib/php/twitter.php</name>
    </include>
    <include line="70" type="Include" package="Default">
      <name/>
    </include>
    <include line="87" type="Include" package="Default">
      <name>beta.php</name>
    </include>
    <class final="false" abstract="false" namespace="global" line="26" package="Session">
      <extends/>
      <name>Session</name>
      <full_name>\Session</full_name>
      <docblock line="16">
        <description>Session management class, include whenever you need authenticated users</description>
        <long-description>&lt;p&gt;This class handles most of the site important operations, it should be included
in all dynamic pages. If the site was to be put in maintenance this file will ensure
that all pages where it is included display the maintenance page instead.&lt;/p&gt;</long-description>
        <tag line="16" name="author" description="Alejandro U. Alvarez"/>
        <tag line="16" name="version" description="2.0"/>
        <tag line="16" name="package" description="Session"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="29" namespace="global" package="Default">
        <name>$url</name>
        <default/>
        <docblock line="27">
          <description>The page url current being viewed</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" namespace="global" package="Default">
        <name>$referrer</name>
        <default/>
        <docblock line="30">
          <description>Last recorded site page viewed</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" namespace="global" package="Default">
        <name>$curPage</name>
        <default/>
        <docblock line="33">
          <description>The current page name</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="38" namespace="global" package="Default">
        <name>$mtStart</name>
        <default/>
        <docblock line="36">
          <description>Start of page load, to calculate load speed</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="41" namespace="global" package="Default">
        <name>$home</name>
        <default/>
        <docblock line="39">
          <description>Home directory</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" namespace="global" package="Default">
        <name>$user</name>
        <default/>
        <docblock line="42">
          <description>User object handler</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47" namespace="global" package="Default">
        <name>$dbH</name>
        <default/>
        <docblock line="45">
          <description>Database handle</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" namespace="global" package="Default">
        <name>$maintenance</name>
        <default>false</default>
        <docblock line="48">
          <description>Put entire site in maintenance mode</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="57" package="Session">
        <name>Session</name>
        <full_name>Session</full_name>
        <docblock line="52">
          <description>Session constructor</description>
          <long-description>&lt;p&gt;It stores the appropriate values in most of the class attributes&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="124" package="Session">
        <name>db</name>
        <full_name>db</full_name>
        <docblock line="120">
          <description>Create a new Database connection</description>
          <long-description/>
          <tag line="120" name="return" description="Database connection object" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="134" package="Session">
        <name>twitter</name>
        <full_name>twitter</full_name>
        <docblock line="130">
          <description>Create a new Twitter connection</description>
          <long-description/>
          <tag line="130" name="return" description="Twitter object" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="147" package="Session">
        <name>setSecret</name>
        <full_name>setSecret</full_name>
        <docblock line="142">
          <description>Set a new secret value, used for cookie management</description>
          <long-description/>
          <tag line="142" name="param" description="User ID" type="int" variable="$usid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="142" name="return" description="Whether the new secret code was updated" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$usid</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="159" package="Session">
        <name>getSecret</name>
        <full_name>getSecret</full_name>
        <docblock line="154">
          <description>Get the current secret code</description>
          <long-description/>
          <tag line="154" name="param" description="User ID" type="int" variable="$usid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="154" name="return" description="Secret code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="159">
          <name>$usid</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="170" package="Session">
        <name>generateRandStr</name>
        <full_name>generateRandStr</full_name>
        <docblock line="165">
          <description>Generates a string made up of randomized letters (lower and upper case) and digits</description>
          <long-description/>
          <tag line="165" name="param" description="Length of random string" type="int" variable="$length">
            <type by_reference="false">int</type>
          </tag>
          <tag line="165" name="return" description="Randomly generated string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="170">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="189" package="Session">
        <name>clean</name>
        <full_name>clean</full_name>
        <docblock line="184">
          <description>Cleans an input string, only leaving alphanumeric characters</description>
          <long-description/>
          <tag line="184" name="param" description="Input text" type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="184" name="return" description="Cleaned text" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$input</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="198" package="Session">
        <name>set_msg</name>
        <full_name>set_msg</full_name>
        <docblock line="192">
          <description>Set a new message, either error or informative</description>
          <long-description>&lt;p&gt;The Message will be displayed on the next page load&lt;/p&gt;</long-description>
          <tag line="192" name="param" description="The message to be stored" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="198">
          <name>$msg</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="206" package="Session">
        <name>msg</name>
        <full_name>msg</full_name>
        <docblock line="202">
          <description>Displays stored messages using a Fancybox</description>
          <long-description/>
          <tag line="202" name="see" description="\Session:set_msg" refers="\Session:set_msg"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="219" package="Session">
        <name>createDebugFile</name>
        <full_name>createDebugFile</full_name>
        <docblock line="214">
          <description>Create a debug file</description>
          <long-description/>
          <tag line="214" name="param" description="Last message before creating the file" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
          <tag line="214" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
        <argument line="219">
          <name>$msg</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="263" package="Session">
        <name>debug</name>
        <full_name>debug</full_name>
        <docblock line="255">
          <description>Store a debug message, including a full backtrace of the debug function call</description>
          <long-description/>
          <tag line="255" name="param" description="Message to be added" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
          <tag line="255" name="param" description="Whether you want the debug window to appear after storing this message" type="boolean" variable="$display">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="255" name="param" description="Whether the debug window should appear with display:none" type="boolean" variable="$hidden">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="255" name="param" description="Whether to call die() after displaying the debug information" type="boolean" variable="$die">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="255" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
        <argument line="263">
          <name>$msg</name>
          <default/>
          <type/>
        </argument>
        <argument line="263">
          <name>$display</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="263">
          <name>$hidden</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="263">
          <name>$die</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="310" package="Session">
        <name>unsetCookie</name>
        <full_name>unsetCookie</full_name>
        <docblock line="306">
          <description>Unset a given cookie</description>
          <long-description/>
          <tag line="306" name="param" description="Cookie name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="310">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="319" package="Session">
        <name>login</name>
        <full_name>login</full_name>
        <docblock line="313">
          <description>Logs a user in, this should be called instead of directly accesing the Auth method</description>
          <long-description/>
          <tag line="313" name="param" description="User email" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="313" name="param" description="User password" type="string" variable="$pass">
            <type by_reference="false">string</type>
          </tag>
          <tag line="313" name="return" description="Whether the login was successful" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="319">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
        <argument line="319">
          <name>$pass</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="351" package="Session">
        <name>register</name>
        <full_name>register</full_name>
        <docblock line="343">
          <description>Register a new user, this should be called instead of directly accesing the Auth method</description>
          <long-description/>
          <tag line="343" name="param" description="User email" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="343" name="param" description="User name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="343" name="param" description="Password" type="string" variable="$pass">
            <type by_reference="false">string</type>
          </tag>
          <tag line="343" name="param" description="Whether the email has already been checked" type="boolean" variable="$checkedEmail">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="343" name="return" description="Whether the registration was successful" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="351">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
        <argument line="351">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="351">
          <name>$pass</name>
          <default/>
          <type/>
        </argument>
        <argument line="351">
          <name>$checkedEmail</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="363" package="Session">
        <name>loginUser</name>
        <full_name>loginUser</full_name>
        <docblock line="356">
          <description>Setup all variables to login user</description>
          <long-description/>
          <tag line="356" name="access" description="private"/>
          <tag line="356" name="param" description="User ID" type="int" variable="$usid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="356" name="param" description="User email address" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="356" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
        <argument line="363">
          <name>$usid</name>
          <default/>
          <type/>
        </argument>
        <argument line="363">
          <name>$email</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="378" package="Session">
        <name>token</name>
        <full_name>token</full_name>
        <docblock line="371">
          <description>Generate a new security token</description>
          <long-description/>
          <tag line="371" name="access" description="private"/>
          <tag line="371" name="param" description="User ID" type="int" variable="$usid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="371" name="param" description="Random seed to be used" type="string" variable="$seed">
            <type by_reference="false">string</type>
          </tag>
          <tag line="371" name="return" description="Random token (From sha1)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="378">
          <name>$usid</name>
          <default/>
          <type/>
        </argument>
        <argument line="378">
          <name>$seed</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="386" package="Session">
        <name>logout</name>
        <full_name>logout</full_name>
        <docblock line="383">
          <description>Log current user out</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="400" package="Session">
        <name>sessionCookie</name>
        <full_name>sessionCookie</full_name>
        <docblock line="394">
          <description>Generate or check session cookie, depending on the mode</description>
          <long-description/>
          <tag line="394" name="param" description="If mode=1 it generates a new cookie, if mode=2 it checks the current cookie" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="394" name="param" description="User ID to be used" type="int" variable="$usid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="394" name="return" description="Whether everything is OK" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="400">
          <name>$mode</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="400">
          <name>$usid</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="424" package="Session">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="418">
          <description>Checks if a variable is valid for the type</description>
          <long-description/>
          <tag line="418" name="param" description="Whatever you want to check" type="\var" variable="$what">
            <type by_reference="false">\var</type>
          </tag>
          <tag line="418" name="param" description="Type to be checked agains: [email, boolean, float, int, ip, regexp, url]" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="418" name="return" description="Whether the variable is of that type" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="424">
          <name>$what</name>
          <default/>
          <type/>
        </argument>
        <argument line="424">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="440" package="Session">
        <name>logged</name>
        <full_name>logged</full_name>
        <docblock line="436">
          <description>Check if current user is logged in</description>
          <long-description/>
          <tag line="436" name="return" description="Whether the user is logged in" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="447" package="Session">
        <name>user</name>
        <full_name>user</full_name>
        <docblock line="443">
          <description>Create a new user, if there is a user session variable it creates from there.</description>
          <long-description/>
          <tag line="443" name="return" description="User object" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="style.php" hash="e23148d759731e42990a4bc22ac7cbe5" package="Default">
    <docblock line="2">
      <description>Style functions</description>
      <long-description/>
    </docblock>
    <function namespace="global" line="12" package="Default">
      <name>dispTime</name>
      <full_name>\dispTime</full_name>
      <docblock line="6">
        <description>Display time in a Twitter style (i.e.</description>
        <long-description>&lt;p&gt;8m, 2h)&lt;/p&gt;</long-description>
        <tag line="6" name="param" description="Initial time, in UNIX timestamp format" type="int" variable="$stime">
          <type by_reference="false">int</type>
        </tag>
        <tag line="6" name="param" description="Check against current date" type="boolean" variable="$now">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="6" name="return" description="Formatted time" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="12">
        <name>$stime</name>
        <default/>
        <type/>
      </argument>
      <argument line="12">
        <name>$now</name>
        <default>true</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="40" package="Default">
      <name>dispTimeHour</name>
      <full_name>\dispTimeHour</full_name>
      <docblock line="35">
        <description>Display time in a Tuenti style (i.e.</description>
        <long-description>&lt;p&gt;Hoy, 16:53)&lt;/p&gt;</long-description>
        <tag line="35" name="param" description="The time, in UNIX timestamp format" type="int" variable="$stime">
          <type by_reference="false">int</type>
        </tag>
        <tag line="35" name="return" description="Formatted time" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="40">
        <name>$stime</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="57" package="Default">
      <name>n2</name>
      <full_name>\n2</full_name>
      <docblock line="52">
        <description>Ensure that a text block contains no more than 2 spaces in a row.</description>
        <long-description/>
        <tag line="52" name="param" description="Text block" type="string" variable="$string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="52" name="return" description="Formatted text block" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="57">
        <name>$string</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="65" package="Default">
      <name>clean</name>
      <full_name>\clean</full_name>
      <docblock line="60">
        <description>Ensure that a text block doesn't contain malicius code</description>
        <long-description/>
        <tag line="60" name="param" description="Text to be cleaned" type="string" variable="$m">
          <type by_reference="false">string</type>
        </tag>
        <tag line="60" name="return" description="Clean version" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="65">
        <name>$m</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="76" package="Default">
      <name>colorID</name>
      <full_name>\colorID</full_name>
      <docblock line="68">
        <description>Generate a random color from a user ID.</description>
        <long-description>&lt;p&gt;The generated color will always be the same for the same user ID
it uses the MD5 hash of the ID to generate the color coordinates&lt;/p&gt;</long-description>
        <tag line="68" name="param" description="User ID" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="68" name="return" description="Hex representation of the color" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="76">
        <name>$id</name>
        <default/>
        <type/>
      </argument>
    </function>
  </file>
  <file path="timeline.php" hash="840d40965a3800424b53c510fd466c5a" package="Default">
    <docblock line="2">
      <description>Timeline management</description>
      <long-description/>
    </docblock>
    <include line="8" type="Include" package="Default">
      <name>lib/php/linker.php</name>
    </include>
    <class final="false" abstract="false" namespace="global" line="18" package="Display">
      <extends/>
      <name>Timeline</name>
      <full_name>\Timeline</full_name>
      <docblock line="10">
        <description>Timeline management class</description>
        <long-description>&lt;p&gt;This class takes care of all aspects of a Twitter-like timeline. Even handles pagination, replies... etc&lt;/p&gt;</long-description>
        <tag line="10" name="author" description="Alejandro U. Alvarez"/>
        <tag line="10" name="version" description="1.0"/>
        <tag line="10" name="package" description="Display"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" namespace="global" package="Default">
        <name>$type</name>
        <default/>
        <docblock line="20">
          <description>Numeric timeline type</description>
          <long-description>&lt;p&gt;These are the possible types:
 0. Twitter style timeline "{User}"
1. Private profile timeline "You said about {Person}"
2. News timeline "{User} said about {Person}"
3. Public profile timeline "Said about {User}"
4. Replies to your comments timeline "{User} said about {Person}"
5. Conversation "{User} said about {Person}"&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="33" namespace="global" package="Default">
        <name>$identifier</name>
        <default/>
        <docblock line="31">
          <description>Identifies the timeline if needed (User ID, Person ID.</description>
          <long-description>&lt;p&gt;..)&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" namespace="global" package="Default">
        <name>$query</name>
        <default/>
        <docblock line="34">
          <description>The query being used to load comments</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" namespace="global" package="Default">
        <name>$commentsPerPage</name>
        <default/>
        <docblock line="37">
          <description>Comments to be displayed per page</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" namespace="global" package="Default">
        <name>$offset</name>
        <default/>
        <docblock line="40">
          <description>Initial offset, for pagination</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Display">
        <name>Timeline</name>
        <full_name>Timeline</full_name>
        <docblock line="44">
          <description>Timeline constructor</description>
          <long-description>&lt;p&gt;Types 1 and 3 require the picture to be passed by parameter&lt;/p&gt;</long-description>
          <tag line="44" name="param" description="Timeline type, defaults to 0" type="int" variable="$type">
            <type by_reference="false">int</type>
          </tag>
          <tag line="44" name="param" description="Timeline identifier, defaults to 0" type="int" variable="$identifier">
            <type by_reference="false">int</type>
          </tag>
          <tag line="44" name="param" description="Comments per page, defaults to 20" type="int" variable="$limit">
            <type by_reference="false">int</type>
          </tag>
          <tag line="44" name="param" description="Pagination offset, defaults to 0" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$type</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="52">
          <name>$identifier</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="52">
          <name>$limit</name>
          <default>20</default>
          <type/>
        </argument>
        <argument line="52">
          <name>$offset</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="63" package="Display">
        <name>buidQuery</name>
        <full_name>buidQuery</full_name>
        <docblock line="59">
          <description>Builds timeline query, depends on type and identifier</description>
          <long-description/>
          <tag line="59" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="97" package="Display">
        <name>displayTimeline</name>
        <full_name>displayTimeline</full_name>
        <docblock line="90">
          <description>Displays the timeline.</description>
          <long-description>&lt;p&gt;This function directly prints the data&lt;/p&gt;

&lt;p&gt;This should be called after the constructor directly on the page.&lt;/p&gt;</long-description>
          <tag line="90" name="param" description="Whether the comments should be parsed" type="boolean" variable="$parseComments">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="90" name="param" description="User profile picture, only needed for some types" type="string" variable="$pic">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$parseComments</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="97">
          <name>$pic</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="133" package="Display">
        <name>displayComments</name>
        <full_name>displayComments</full_name>
        <docblock line="124">
          <description>Displays comments, it's like display timeline but this function only displays comments, without wrapping HTML</description>
          <long-description>&lt;p&gt;It's meant to be used in AJAX calls that want to get more comments for an already displayed timeline&lt;/p&gt;</long-description>
          <tag line="124" name="param" description="Whether the comments should be parsed" type="boolean" variable="$parseComments">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="124" name="param" description="User profile picture, depending on the timeline type it may not be required" type="string" variable="$paramPic">
            <type by_reference="false">string</type>
          </tag>
          <tag line="124" name="param" description="Whether you want the comments printed or returned" type="boolean" variable="$echo">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="124" name="return" description="Comments, if $echo is set to false" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="133">
          <name>$parseComments</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="133">
          <name>$paramPic</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="133">
          <name>$echo</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="twitter.php" hash="405fdf37366647b34787b526da99bd1f" package="Default">
    <docblock line="2">
      <description>Twitter abstraction layer</description>
      <long-description></long-description>
    </docblock>
    <include line="9" type="Include" package="Default">
      <name>EpiCurl.php</name>
      <docblock line="6">
        <description>Include Twitter API</description>
        <long-description></long-description>
      </docblock>
    </include>
    <include line="10" type="Include" package="Default">
      <name>EpiOAuth.php</name>
    </include>
    <include line="11" type="Include" package="Default">
      <name>EpiTwitter.php</name>
    </include>
    <class final="false" abstract="false" namespace="global" line="20" package="Social\Twitter">
      <extends/>
      <name>Twitter</name>
      <full_name>\Twitter</full_name>
      <docblock line="13">
        <description>Twitter abstraction layer class.</description>
        <long-description></long-description>
        <tag line="13" name="author" description="Alejandro U. Alvarez"/>
        <tag line="13" name="version" description="2.0"/>
        <tag line="13" name="package" description="Social"/>
        <tag line="13" name="subpackage" description="Twitter"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="23" namespace="global" package="Default">
        <name>$twitter</name>
        <default></default>
        <docblock line="21">
          <description>Twitter API object</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="26" namespace="global" package="Default">
        <name>$twid</name>
        <default>false</default>
        <docblock line="24">
          <description>Twitter account ID</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="30" namespace="global" package="Default">
        <name>$appid</name>
        <default>'RUIPLnk0zQGnA20iUnzVUw'</default>
        <docblock line="27">
          <description>Twitter App ID</description>
          <long-description></long-description>
          <tag line="27" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="34" namespace="global" package="Default">
        <name>$secret</name>
        <default>'c28YlpEb8ca5Uku0nJWHScxJNJK0EJaN07SlFpEcA8'</default>
        <docblock line="31">
          <description>Twitter App secret</description>
          <long-description></long-description>
          <tag line="31" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" namespace="global" package="Default">
        <name>$name</name>
        <default></default>
        <docblock line="35">
          <description>Twitter user name</description>
          <long-description></long-description>
          <tag line="35" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" namespace="global" package="Default">
        <name>$pic_normal</name>
        <default></default>
        <docblock line="39">
          <description>Twitter profile picture, normal size</description>
          <long-description></long-description>
          <tag line="39" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" namespace="global" package="Default">
        <name>$pic_bigger</name>
        <default></default>
        <docblock line="43">
          <description>Twitter profile picture, original size</description>
          <long-description></long-description>
          <tag line="43" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" namespace="global" package="Default">
        <name>$pic</name>
        <default></default>
        <docblock line="47">
          <description>Twitter currently used picture</description>
          <long-description></long-description>
          <tag line="47" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54" namespace="global" package="Default">
        <name>$oauth_token</name>
        <default></default>
        <docblock line="51">
          <description>Twitter OAuth_Token</description>
          <long-description></long-description>
          <tag line="51" name="access" description="protected"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" namespace="global" package="Default">
        <name>$oauth_secret</name>
        <default></default>
        <docblock line="55">
          <description>TwitterOAuth_Secret</description>
          <long-description></long-description>
          <tag line="55" name="access" description="protected"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="65" package="Social\Twitter">
        <name>Twitter</name>
        <full_name>Twitter</full_name>
        <docblock line="60">
          <description>Twitter constructor</description>
          <long-description></long-description>
          <tag line="60" name="param" description="Twitter account ID" type="int" variable="$twid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="60" name="return" description="Whether it was created" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$twid</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="83" package="Social\Twitter">
        <name>init</name>
        <full_name>init</full_name>
        <docblock line="79">
          <description>Start up the Twitter API and authorize user if credentials available</description>
          <long-description></long-description>
          <tag line="79" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="104" package="Social\Twitter">
        <name>loadFromSession</name>
        <full_name>loadFromSession</full_name>
        <docblock line="101">
          <description>Loads a Twitter account from session, authorizing it if possible</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="Social\Twitter">
        <name>updateDB</name>
        <full_name>updateDB</full_name>
        <docblock line="115">
          <description>Update DB cache (Fields &amp; values can be arrays)</description>
          <long-description></long-description>
          <tag line="115" name="param" description="Fields to be updated, it can also be a string to update only one field" type="array" variable="$fields">
            <type by_reference="false">array</type>
          </tag>
          <tag line="115" name="param" description="Values, in the same format as the fields" type="array" variable="$values">
            <type by_reference="false">array</type>
          </tag>
          <tag line="115" name="return" description="Whether the operation was successful" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="121">
          <name>$fields</name>
          <default></default>
          <type/>
        </argument>
        <argument line="121">
          <name>$values</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="148" package="Social\Twitter">
        <name>getDB</name>
        <full_name>getDB</full_name>
        <docblock line="142">
          <description>Get data from Database cache</description>
          <long-description></long-description>
          <tag line="142" name="param" description="Data to be fetched" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="142" name="access" description="private"/>
          <tag line="142" name="return" description="Data from DB, false if not available" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="148">
          <name>$what</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="174" package="Social\Twitter">
        <name>getFromTwitter</name>
        <full_name>getFromTwitter</full_name>
        <docblock line="168">
          <description>Get data from Twitter</description>
          <long-description></long-description>
          <tag line="168" name="param" description="Data to be fetched" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="168" name="access" description="private"/>
          <tag line="168" name="return" description="Data from Twitter, false if not available" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$what</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="194" package="Social\Twitter">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="188">
          <description>Get an attribute</description>
          <long-description></long-description>
          <tag line="188" name="param" description="Attribute name" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="188" name="param" description="Whether to obtain the value from Twitter or the Database" type="boolean" variable="$obtain">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="188" name="return" description="Attribute value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$what</name>
          <default></default>
          <type/>
        </argument>
        <argument line="194">
          <name>$obtain</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="209" package="Social\Twitter">
        <name>set</name>
        <full_name>set</full_name>
        <docblock line="202">
          <description>Set an attribute</description>
          <long-description></long-description>
          <tag line="202" name="param" description="Attribute name" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="202" name="param" description="Attribute value" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
          <tag line="202" name="param" description="Whether to update the Database" type="boolean" variable="$updateDB">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="202" name="return" description="Attribute value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="209">
          <name>$what</name>
          <default></default>
          <type/>
        </argument>
        <argument line="209">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <argument line="209">
          <name>$updateDB</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="221" package="Social\Twitter">
        <name>name</name>
        <full_name>name</full_name>
        <docblock line="217">
          <description>Get Twitter name</description>
          <long-description></long-description>
          <tag line="217" name="return" description="Twitter name" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="235" package="Social\Twitter">
        <name>pic</name>
        <full_name>pic</full_name>
        <docblock line="230">
          <description>Get Twitter profile picture</description>
          <long-description></long-description>
          <tag line="230" name="param" description="Image type: normal or bigger" type="string" variable="$size">
            <type by_reference="false">string</type>
          </tag>
          <tag line="230" name="return" description="User profile pic" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="235">
          <name>$size</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="262" package="Social\Twitter">
        <name>logged</name>
        <full_name>logged</full_name>
        <docblock line="258">
          <description>Determine whether user has logged in Twitter</description>
          <long-description></long-description>
          <tag line="258" name="return" description="Twitter session state" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="279" package="Social\Twitter">
        <name>loginUser</name>
        <full_name>loginUser</full_name>
        <docblock line="275">
          <description>Get account ID from access tokens</description>
          <long-description></long-description>
          <tag line="275" name="return" description="Twitter account ID or false" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="302" package="Social\Twitter">
        <name>checkTWuser</name>
        <full_name>checkTWuser</full_name>
        <docblock line="297">
          <description>Check if TW user is on database</description>
          <long-description></long-description>
          <tag line="297" name="param" description="[Optional] Twitter account ID" type="int" variable="$twid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="297" name="return" description="QuePiensas user ID if found, false otherwise" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="302">
          <name>$twid</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="322" package="Social\Twitter">
        <name>addTWuser</name>
        <full_name>addTWuser</full_name>
        <docblock line="315">
          <description>Update or Insert data for a Twitter user (Using REPLACE)</description>
          <long-description></long-description>
          <tag line="315" name="param" description="OAuth value" type="string" variable="$oauth">
            <type by_reference="false">string</type>
          </tag>
          <tag line="315" name="param" description="OAuth_secret value" type="string" variable="$oauth_secret">
            <type by_reference="false">string</type>
          </tag>
          <tag line="315" name="param" description="Whether the user has already been checked" type="boolean" variable="$checked">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="315" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
        <argument line="322">
          <name>$oauth</name>
          <default></default>
          <type/>
        </argument>
        <argument line="322">
          <name>$oauth_secret</name>
          <default></default>
          <type/>
        </argument>
        <argument line="322">
          <name>$checked</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="344" package="Social\Twitter">
        <name>loginLink</name>
        <full_name>loginLink</full_name>
        <docblock line="340">
          <description>Get Twitter login link</description>
          <long-description></long-description>
          <tag line="340" name="return" description="Login link or # if not available" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="uploader.php" hash="b62dcce9043f2f217bbc193c8667c4ff" package="Default">
    <docblock line="2">
      <description>File uploader</description>
      <long-description/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="15" package="Files">
      <extends/>
      <name>Uploader</name>
      <full_name>\Uploader</full_name>
      <docblock line="6">
        <description>A PHP file uploader, it includes many security checks although it is very minimalistic</description>
        <long-description>&lt;p&gt;This Class allows you to very easily upload files. It checks filesize, generates a new name
if you want, or uses whatever name you specify.&lt;/p&gt;</long-description>
        <tag line="6" name="author" description="Alejandro U. Alvarez"/>
        <tag line="6" name="version" description="2.0"/>
        <tag line="6" name="package" description="Files"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="18" namespace="global" package="Default">
        <name>$maxSize</name>
        <default/>
        <docblock line="16">
          <description>Max allowed size, in bytes</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="21" namespace="global" package="Default">
        <name>$allowedExt</name>
        <default/>
        <docblock line="19">
          <description>Allowed extensions, CSV</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="24" namespace="global" package="Default">
        <name>$fileInfo</name>
        <default>array()</default>
        <docblock line="22">
          <description>File information array</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Files">
        <name>Uploader</name>
        <full_name>Uploader</full_name>
        <docblock line="26">
          <description>Class constructor, use it to set the maximum size and the allowed extensions</description>
          <long-description/>
          <tag line="26" name="param" description="Maximum size in bytes" type="int" variable="$maxSize">
            <type by_reference="false">int</type>
          </tag>
          <tag line="26" name="param" description="Comma separated list of allowed extensions. Ex. 'gif,png,jpeg'" type="string" variable="$allowedExt">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$maxSize</name>
          <default/>
          <type/>
        </argument>
        <argument line="31">
          <name>$allowedExt</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="42" package="Files">
        <name>check</name>
        <full_name>check</full_name>
        <docblock line="36">
          <description>Check whether the uploaded file meets the requirements</description>
          <long-description/>
          <tag line="36" name="param" description="Name used in the file upload HTML field" type="string" variable="$uploadName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="return" description="Whether the file is valid" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="36" name="access" description="private"/>
        </docblock>
        <argument line="42">
          <name>$uploadName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="97" package="Files">
        <name>upload</name>
        <full_name>upload</full_name>
        <docblock line="86">
          <description>Upload the file, call directly after the constructor</description>
          <long-description>&lt;p&gt;If any errors appear during the file upload it will call Session:set_msg() to notify the user
and then return false;
If the file name already exists it will change it to a random name, until its not taken&lt;/p&gt;</long-description>
          <tag line="86" name="param" description="Upload field name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="86" name="param" description="Directory where uploaded files should be stored" type="\stirng" variable="$dir">
            <type by_reference="false">\stirng</type>
          </tag>
          <tag line="86" name="param" description="File name to store it with, leave blank if you want a random name" type="string" variable="$fname">
            <type by_reference="false">string</type>
          </tag>
          <tag line="86" name="return" description="Whether the file could be uploaded." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="97">
          <name>$dir</name>
          <default/>
          <type/>
        </argument>
        <argument line="97">
          <name>$fname</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="user.php" hash="98e508190c253fef1edd7e893eed40c4" package="Default">
    <docblock line="2">
      <description>This file features the User class</description>
      <long-description/>
    </docblock>
    <include line="388" type="Include" package="Default">
      <name>style.php</name>
    </include>
    <class final="false" abstract="false" namespace="global" line="16" package="Users">
      <extends/>
      <name>User</name>
      <full_name>\User</full_name>
      <docblock line="6">
        <description>User class, generate a User object for every user you want to interact with</description>
        <long-description>&lt;p&gt;It will hold all info about current user
and ensure consistency. Also take care of cache.&lt;/p&gt;</long-description>
        <tag line="6" name="author" description="Alejandro U. Alvarez"/>
        <tag line="6" name="version" description="1.1"/>
        <tag line="6" name="package" description="Users"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="23" namespace="global" package="Default">
        <name>$id</name>
        <default/>
        <docblock line="18">
          <description>User ID</description>
          <long-description/>
          <tag line="18" name="var" description="ID, 0 if the user is not logged in" type="\User">
            <type by_reference="false">\User</type>
          </tag>
          <tag line="18" name="access" description="public"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="29" namespace="global" package="Default">
        <name>$fbuser</name>
        <default/>
        <docblock line="24">
          <description>Facebook ID</description>
          <long-description/>
          <tag line="24" name="var" description="ID, 0 if not linked" type="\User">
            <type by_reference="false">\User</type>
          </tag>
          <tag line="24" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="35" namespace="global" package="Default">
        <name>$twuser</name>
        <default/>
        <docblock line="30">
          <description>Twitter ID</description>
          <long-description/>
          <tag line="30" name="var" description="ID, 0 if not linked" type="\User">
            <type by_reference="false">\User</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="41" namespace="global" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="36">
          <description>User Name</description>
          <long-description/>
          <tag line="36" name="var" description="ID, 0 if the user is not logged in" type="\User">
            <type by_reference="false">\User</type>
          </tag>
          <tag line="36" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="47" namespace="global" package="Default">
        <name>$bio</name>
        <default/>
        <docblock line="42">
          <description>User description</description>
          <long-description/>
          <tag line="42" name="var" description="" type="\Description">
            <type by_reference="false">\Description</type>
          </tag>
          <tag line="42" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="53" namespace="global" package="Default">
        <name>$pic</name>
        <default/>
        <docblock line="48">
          <description>Profile pic src</description>
          <long-description/>
          <tag line="48" name="var" description="pic src if set" type="\Profile">
            <type by_reference="false">\Profile</type>
          </tag>
          <tag line="48" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="59" namespace="global" package="Default">
        <name>$usePic</name>
        <default/>
        <docblock line="54">
          <description>User ID</description>
          <long-description/>
          <tag line="54" name="var" description="picture the user wants displayed" type="\What">
            <type by_reference="false">\What</type>
          </tag>
          <tag line="54" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="65" namespace="global" package="Default">
        <name>$email</name>
        <default/>
        <docblock line="60">
          <description>User email</description>
          <long-description/>
          <tag line="60" name="var" description="email address" type="\User">
            <type by_reference="false">\User</type>
          </tag>
          <tag line="60" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="71" namespace="global" package="Default">
        <name>$jtime</name>
        <default/>
        <docblock line="66">
          <description>The date in UNIX timestamp when the user first appeared</description>
          <long-description/>
          <tag line="66" name="var" description="time" type="\Join">
            <type by_reference="false">\Join</type>
          </tag>
          <tag line="66" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="77" namespace="global" package="Default">
        <name>$ltime</name>
        <default/>
        <docblock line="72">
          <description>Last time in UNIX timestamp that the user was active</description>
          <long-description/>
          <tag line="72" name="var" description="time the user was active" type="\Last">
            <type by_reference="false">\Last</type>
          </tag>
          <tag line="72" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="86" package="Users">
        <name>User</name>
        <full_name>User</full_name>
        <docblock line="79">
          <description>User constructor, builds an object containing a user with all methods for interacting with it</description>
          <long-description/>
          <tag line="79" name="param" description="Required, set to 0 if you want an anonymous user." type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="79" name="param" description="User name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="param" description="User email" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="return" description="User object" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="86">
          <name>$name</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="86">
          <name>$email</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="126" package="Users">
        <name>g</name>
        <full_name>g</full_name>
        <docblock line="120">
          <description>Return a user attribute.</description>
          <long-description>&lt;p&gt;It also manages cache through Session variables&lt;/p&gt;</long-description>
          <tag line="120" name="param" description="Attribute to be returned" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="param" description="Whether you want to pull the attribute from the database" type="boolean" variable="$db">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="120" name="return" description="The value if found, false otherwise" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$what</name>
          <default/>
          <type/>
        </argument>
        <argument line="126">
          <name>$db</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="143" package="Users">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="138">
          <description>Same as g() above</description>
          <long-description/>
          <tag line="138" name="param" description="Attribute to get" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="138" name="see" description="\g" refers="\g"/>
        </docblock>
        <argument line="143">
          <name>$what</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="151" package="Users">
        <name>hasPic</name>
        <full_name>hasPic</full_name>
        <docblock line="147">
          <description>Checks if user has picture uploaded</description>
          <long-description/>
          <tag line="147" name="return" description="True if user has uploaded a pic, false otherwise" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="160" package="Users">
        <name>pic</name>
        <full_name>pic</full_name>
        <docblock line="155">
          <description>Returns the associated picture for the current user</description>
          <long-description/>
          <tag line="155" name="param" description="Image type: profile or square" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="155" name="return" description="The image full src" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="160">
          <name>$type</name>
          <default>'profile'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="230" package="Users">
        <name>set</name>
        <full_name>set</full_name>
        <docblock line="222">
          <description>Setter for user attributes</description>
          <long-description/>
          <tag line="222" name="param" description="Attribute to set" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="222" name="param" description="New value to be assigned" type="string" variable="$new">
            <type by_reference="false">string</type>
          </tag>
          <tag line="222" name="param" description="Whether to update the database" type="boolean" variable="$updateDB">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="222" name="param" description="Whether to strip html tags and escape the string" type="boolean" variable="$clean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="222" name="return" description="The same thing that was passed to new" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="230">
          <name>$what</name>
          <default/>
          <type/>
        </argument>
        <argument line="230">
          <name>$new</name>
          <default/>
          <type/>
        </argument>
        <argument line="230">
          <name>$updateDB</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="230">
          <name>$clean</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="257" package="Users">
        <name>now</name>
        <full_name>now</full_name>
        <docblock line="252">
          <description>Function now, guarda algo solo para esta sesion</description>
          <long-description/>
          <tag line="252" name="param" description="Attribute to set" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="252" name="param" description="Value for that attribute" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="257">
          <name>$what</name>
          <default/>
          <type/>
        </argument>
        <argument line="257">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="269" package="Users">
        <name>locate</name>
        <full_name>locate</full_name>
        <docblock line="260">
          <description>Get geolocation for user IP</description>
          <long-description>&lt;p&gt;Returns an array 0-&gt;Country 1-&gt;Region 2-&gt;City
It's called from getLoc() below&lt;/p&gt;</long-description>
          <tag line="260" name="param" description="IP address to locate" type="string" variable="$ip">
            <type by_reference="false">string</type>
          </tag>
          <tag line="260" name="access" description="private"/>
          <tag line="260" name="return" description="[country, region, city, lat, lng]" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="269">
          <name>$ip</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="295" package="Users">
        <name>getLoc</name>
        <full_name>getLoc</full_name>
        <docblock line="287">
          <description>Gets location for a given user ID</description>
          <long-description>&lt;p&gt;Alternatively you can pass another IP address&lt;/p&gt;</long-description>
          <tag line="287" name="param" description="User id whose location you want" type="int" variable="$usid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="287" name="param" description="Alternative IP to check" type="string" variable="$ip">
            <type by_reference="false">string</type>
          </tag>
          <tag line="287" name="return" description="Array with user location [country, region, city, lat, lng]" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="295">
          <name>$usid</name>
          <default/>
          <type/>
        </argument>
        <argument line="295">
          <name>$ip</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="349" package="Users">
        <name>location</name>
        <full_name>location</full_name>
        <docblock line="337">
          <description>Returns location of user, if available</description>
          <long-description>&lt;p&gt;Type determines what data to return
0 = Country
1 = Region
2 = City
3 = Lat
4 = Lng&lt;/p&gt;</long-description>
          <tag line="337" name="param" description="Check the values above" type="int" variable="$type">
            <type by_reference="false">int</type>
          </tag>
          <tag line="337" name="return" description="The location type requested or false if not available" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="349">
          <name>$type</name>
          <default>1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="380" package="Users">
        <name>sendPM</name>
        <full_name>sendPM</full_name>
        <docblock line="357">
          <description>Sends private message to user, from current user</description>
          <long-description>&lt;p&gt;All variables are checked within this function
STATUS GUIDE
    0 -&gt; Just sent, unread
    1 -&gt; Read
    2 -&gt; Deleted by sender, unread
    3 -&gt; Deleted by sender, read
    4 -&gt; Deleted by receiver
IDENT GUIDE
    # -&gt;    To          Current User
    0 -&gt;    Public      Public
    1 -&gt;    Private     Public
    2 -&gt;    Public      Private
    3 -&gt;    Private     Private&lt;/p&gt;</long-description>
          <tag line="357" name="param" description="User ID of receiver" type="int" variable="$to">
            <type by_reference="false">int</type>
          </tag>
          <tag line="357" name="param" description="Message content, no need to clean it" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
          <tag line="357" name="param" description="Thread ID, or 0 if PM is not a reply" type="int" variable="$thread">
            <type by_reference="false">int</type>
          </tag>
          <tag line="357" name="param" description="Check description above" type="int" variable="$ident">
            <type by_reference="false">int</type>
          </tag>
          <tag line="357" name="param" description="If the message is in reply to a comment, the ID of the comment" type="int" variable="$com">
            <type by_reference="false">int</type>
          </tag>
          <tag line="357" name="return" description="ID of the sent PM or false if something failed" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="380">
          <name>$to</name>
          <default/>
          <type/>
        </argument>
        <argument line="380">
          <name>$msg</name>
          <default/>
          <type/>
        </argument>
        <argument line="380">
          <name>$thread</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="380">
          <name>$ident</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="380">
          <name>$com</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="404" package="Users">
        <name>updatePMstatus</name>
        <full_name>updatePMstatus</full_name>
        <docblock line="397">
          <description>Set PM to read status.</description>
          <long-description>&lt;p&gt;If message is part of a thread&lt;/p&gt;

&lt;p&gt;It sets the status to read for the whole thread.&lt;/p&gt;</long-description>
          <tag line="397" name="param" description="ID of the thread if PM is a reply" type="int" variable="$thread">
            <type by_reference="false">int</type>
          </tag>
          <tag line="397" name="return" description="Whether status was set" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="404">
          <name>$thread</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="428" package="Users">
        <name>hasLoc</name>
        <full_name>hasLoc</full_name>
        <docblock line="424">
          <description>Check whether a user has been located</description>
          <long-description/>
          <tag line="424" name="return" description="true if user has location, false otherwise" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="439" package="Users">
        <name>linkFB</name>
        <full_name>linkFB</full_name>
        <docblock line="431">
          <description>Link given facebook ID to the current user.</description>
          <long-description>&lt;p&gt;If no ID is provided it checks whether there is
a logged in facebook account&lt;/p&gt;</long-description>
          <tag line="431" name="param" description="Facebook account ID, if false it will use currently logged fb account" type="int" variable="$fbid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="431" name="return" description="Whether the account was linked" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="439">
          <name>$fbid</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="461" package="Users">
        <name>unlinkFB</name>
        <full_name>unlinkFB</full_name>
        <docblock line="457">
          <description>Unlink Facebook account from the current user</description>
          <long-description/>
          <tag line="457" name="return" description="Whether the account was unlinked" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="485" package="Users">
        <name>linkTW</name>
        <full_name>linkTW</full_name>
        <docblock line="478">
          <description>link given Twitter account ID to the current user.</description>
          <long-description>&lt;p&gt;It also checks whether it has already been linked&lt;/p&gt;</long-description>
          <tag line="478" name="param" description="Twitter user ID, if false it will use currently logged in twitter account" type="int" variable="$twid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="478" name="return" description="Whether the account was linked" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="485">
          <name>$twid</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="508" package="Users">
        <name>unlinkTW</name>
        <full_name>unlinkTW</full_name>
        <docblock line="504">
          <description>Unlink Twitter account for the current user</description>
          <long-description/>
          <tag line="504" name="return" description="Whether the account was unlinked" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="527" package="Users">
        <name>fb</name>
        <full_name>fb</full_name>
        <docblock line="523">
          <description>Check if user has Facebook linked</description>
          <long-description/>
          <tag line="523" name="return" description="Facebook account ID or false if not linked" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="538" package="Users">
        <name>tw</name>
        <full_name>tw</full_name>
        <docblock line="534">
          <description>Check if user has Twitter linked</description>
          <long-description/>
          <tag line="534" name="return" description="Twitter account ID or false if not linked" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <package name="Database" full_name="Database"/>
  <package name="Default" full_name="Default"/>
  <package name="Display" full_name="Display"/>
  <package name="Files" full_name="Files"/>
  <package name="Security" full_name="Security"/>
  <package name="Session" full_name="Session"/>
  <package name="Social" full_name="Social">
    <package name="Facebook" full_name="Social\Facebook"/>
    <package name="Twitter" full_name="Social\Twitter"/>
  </package>
  <package name="Users" full_name="Users"/>
  <namespace name="global" full_name="global"/>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
